{
  "language": "Solidity",
  "sources": {
    "src/mocks/RankifyInstanceEventMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract RankifyInstanceEventMock {\n    event OverTime(uint256 indexed gameId);\n    event LastTurn(uint256 indexed gameId);\n    event ProposalScore(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        string indexed proposalHash,\n        string proposal,\n        uint256 score\n    );\n    event TurnEnded(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        address[] players,\n        uint256[] scores,\n        string[] newProposals,\n        uint256[] proposerIndicies,\n        uint256[][] votes\n    );\n\n    event GameOver(uint256 indexed gameId, address[] indexed players, uint256[] indexed scores);\n\n    event ProposalSubmitted(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        address indexed proposer,\n        bytes32 commitmentHash,\n        string proposalEncryptedByGM\n    );\n    event VoteSubmitted(uint256 indexed gameId, uint256 indexed turn, address indexed player, string votesHidden);\n\n    event RegistrationOpen(uint256 indexed gameid);\n    event PlayerJoined(uint256 indexed gameId, address participant);\n    event GameStarted(uint256 indexed gameId);\n    event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 indexed rank);\n    event GameClosed(uint256 indexed gameId);\n    event PlayerLeft(uint256 indexed gameId, address indexed player);\n    uint256[][] votes = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]];\n\n    constructor() {\n        address[] memory players = new address[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            players[i] = (address(i));\n        }\n        uint256[] memory scores = new uint256[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            scores[i] = i;\n        }\n        string[] memory newProposals = new string[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            newProposals[i] = \"https://www.youtube.com/watch?v=KaOC9danxNo\";\n        }\n        emit TurnEnded(1, 1, players, scores, newProposals, scores, votes);\n    }\n\n    function fireAll() public {\n        address[] memory players = new address[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            players[i] = (address(i));\n        }\n        uint256[] memory scores = new uint256[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            scores[i] = i;\n        }\n        string[] memory newProposals = new string[](5);\n        for (uint160 i = 0; i < 5; i++) {\n            newProposals[i] = \"https://www.youtube.com/watch?v=KaOC9danxNo\";\n        }\n\n        emit OverTime(1);\n        emit LastTurn(1);\n        emit ProposalScore(1, 2, \"0x1233123131\", \"Some kind of proposal\", 0);\n        emit TurnEnded(1, 2, players, scores, newProposals, scores, votes);\n        emit GameOver(1, players, new uint256[](0));\n        emit ProposalSubmitted(1, 2, address(12), bytes32(0), \"0x1289031301\");\n        emit VoteSubmitted(1, 2, address(12), \"0x123131\");\n        emit RegistrationOpen(1);\n        emit PlayerJoined(1, address(12));\n        emit GameStarted(1);\n        emit gameCreated(1, address(11), address(14), 0);\n        emit GameClosed(1);\n        emit PlayerLeft(1, address(12));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}