{
  "address": "0xf816e6d200ECe7e909b0071128f519a2c2D47B6B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "scores",
          "type": "uint256[]"
        }
      ],
      "name": "GameOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "LastTurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "OverTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "turn",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "proposalHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "ProposalScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "turn",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitmentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalEncryptedByGM",
          "type": "string"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "turn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "scores",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "newProposals",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "proposerIndicies",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "votes",
          "type": "uint256[][]"
        }
      ],
      "name": "TurnEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "turn",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "votesHidden",
          "type": "string"
        }
      ],
      "name": "VoteSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "checkSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][]",
          "name": "votes",
          "type": "uint256[][]"
        },
        {
          "internalType": "string[]",
          "name": "newProposals",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "proposerIndicies",
          "type": "uint256[]"
        }
      ],
      "name": "endTurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "turnSalt",
          "type": "bytes32"
        }
      ],
      "name": "playerSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "encryptedProposal",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "commitmentHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            }
          ],
          "internalType": "struct RankifyInstanceGameMastersFacet.ProposalParams",
          "name": "proposalData",
          "type": "tuple"
        }
      ],
      "name": "submitProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "encryptedVotes",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "submitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12b2ec1310484160784b289b731606d9397750defb40e9b30f38d0b7235b33eb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x507c2d32185667156de5B4C440FEEf3800078bDb",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4701079",
    "logsBloom": "0x
    "blockHash": "0x7cb980916eeaf698f566d4441ec39906d9302abec949f171d257bc9cdd28031b",
    "transactionHash": "0x12b2ec1310484160784b289b731606d9397750defb40e9b30f38d0b7235b33eb",
    "logs": [],
    "blockNumber": 218,
    "cumulativeGasUsed": "4701079",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7a9bbef0b3308717a9563a790cb377cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"}],\"name\":\"GameOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"LastTurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"OverTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proposalHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"ProposalScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalEncryptedByGM\",\"type\":\"string\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"newProposals\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"proposerIndicies\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"votes\",\"type\":\"uint256[][]\"}],\"name\":\"TurnEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"votesHidden\",\"type\":\"string\"}],\"name\":\"VoteSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"votes\",\"type\":\"uint256[][]\"},{\"internalType\":\"string[]\",\"name\":\"newProposals\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proposerIndicies\",\"type\":\"uint256[]\"}],\"name\":\"endTurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"turnSalt\",\"type\":\"bytes32\"}],\"name\":\"playerSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"encryptedProposal\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"internalType\":\"struct RankifyInstanceGameMastersFacet.ProposalParams\",\"name\":\"proposalData\",\"type\":\"tuple\"}],\"name\":\"submitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"encryptedVotes\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"submitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/RankifyInstanceGameMastersFacet.sol\":\"RankifyInstanceGameMastersFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x10a6688bc4154b1b76268dbaf497bd8b24f77525ecb9cf829bd3cccec98eefc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x45381337dbccfb58e9443257ba1850070be892ecacd4b0da7db4c4cfa7df0b09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"src/abstracts/CompositeERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.20;\\nimport \\\"../libraries/LibReentrancyGuard.sol\\\";\\nimport \\\"./LockableERC1155.sol\\\";\\n\\nabstract contract CompositeERC1155 is LockableERC1155 {\\n    address[] private dimensions;\\n    uint256[] private weights;\\n\\n    constructor(string memory uri_, address[] memory dimensionTokens, uint256[] memory tokenWeights) ERC1155(uri_) {\\n        require(dimensionTokens.length == tokenWeights.length, \\\"Array lengths must be equal\\\");\\n        dimensions = dimensionTokens;\\n        weights = tokenWeights;\\n    }\\n\\n    function _mint(address to, uint256 tokenId, uint256 value, bytes memory data) internal virtual override {\\n        for (uint256 i = 0; i < dimensions.length; i++) {\\n            LockableERC1155(dimensions[i]).lock(to, tokenId, value * weights[i]);\\n        }\\n        super._mint(to, tokenId, value, data);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 amount) internal override {\\n        for (uint256 i = 0; i < dimensions.length; i++) {\\n            CompositeERC1155(dimensions[i]).burn(from, id, amount * weights[i]);\\n        }\\n        super._burn(from, id, amount);\\n    }\\n\\n    function decompose(address from, uint256 id, uint256 amount) public virtual {\\n        for (uint256 i = 0; i < dimensions.length; i++) {\\n            LockableERC1155(dimensions[i]).unlock(from, id, amount * weights[i]);\\n        }\\n        _burn(from, id, amount);\\n    }\\n\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function getComponents() public virtual returns (address[] memory, uint256[] memory) {\\n        return (dimensions, weights);\\n    }\\n}\\n\",\"keccak256\":\"0xf847c77ad7f62c0e20d9a485612fb368b7e29d2ede12103a849d1b380956f62e\",\"license\":\"Apache-2.0\"},\"src/abstracts/DiamondReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Author: @Peersky https://github.com/peersky\\n * Adapted this diamond reentrancy guard from:\\n\\n * Authors: Moonstream Engineering (engineering@moonstream.to)\\n * GitHub: https://github.com/bugout-dev/dao\\n */\\n\\npragma solidity ^0.8.20;\\nimport \\\"../libraries/LibReentrancyGuard.sol\\\";\\n\\nabstract contract DiamondReentrancyGuard {\\n    modifier nonReentrant() {\\n        LibReentrancyGuard.ReentrancyGuardStruct storage rgs = LibReentrancyGuard.reentrancyGuardStorage();\\n        require(!rgs._entered, \\\"REG: You shall not pass!\\\");\\n        rgs._entered = true;\\n        _;\\n        rgs._entered = false;\\n    }\\n}\\n\",\"keccak256\":\"0xfe1f8e71dc63f898ba9ae59193b975352955e0f8c1a694a78cab07df3389cd91\",\"license\":\"Apache-2.0\"},\"src/abstracts/LockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.20;\\nimport \\\"../libraries/LibReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {ILockableERC1155} from \\\"../interfaces/ILockableERC1155.sol\\\";\\nerror insufficient(uint256 id, uint256 balance, uint256 required);\\n\\nabstract contract LockableERC1155 is ERC1155, ILockableERC1155 {\\n    mapping(address => mapping(uint256 => uint256)) lockedAmounts;\\n\\n    function lock(address account, uint256 id, uint256 amount) public virtual {\\n        if (balanceOf(account, id) < lockedAmounts[account][id] + amount)\\n            require(false, 'insufficient');\\n            // revert insufficient(id, lockedAmounts[account][id], amount);\\n        lockedAmounts[account][id] += amount;\\n        emit TokensLocked(account, id, amount);\\n    }\\n\\n    function unlock(address account, uint256 id, uint256 amount) public virtual {\\n        if (lockedAmounts[account][id] < amount) require(false, 'insufficient');//revert insufficient(id, lockedAmounts[account][id], amount);\\n        lockedAmounts[account][id] -= amount;\\n        emit TokensUnlocked(account, id, amount);\\n    }\\n\\n    function unlockedBalanceOf(address account, uint256 id) public view returns (uint256) {\\n        return balanceOf(account, id) - lockedAmounts[account][id];\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (from != address(0)) {\\n                if (lockedAmounts[from][ids[i]] + amounts[i] > balanceOf(from, ids[i])) {\\n                    require(false,'insufficient');//revert insufficient(ids[i], unlockedBalanceOf(from, ids[i]), amounts[i]);\\n                }\\n            }\\n        }\\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xaa3a50ff76b7a1471cc47ba040abd6999b4845520f8d3d5a7b80075f7b1d34b1\",\"license\":\"Apache-2.0\"},\"src/abstracts/draft-EIP712Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../libraries/LibEIP712Storage.sol\\\";\\nimport \\\"../modifiers/OnlyOwnerDiamond.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 is OnlyOwnerDiamond {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        LibEIP712WithStorage.LibEIP712WithStorageStorage storage ss = LibEIP712WithStorage.EIP712WithStorage();\\n        if (address(this) == ss._CACHED_THIS && block.chainid == ss._CACHED_CHAIN_ID) {\\n            return ss._CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(ss._TYPE_HASH, ss._HASHED_NAME, ss._HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x26b10c662581738d0d65e4df162d8355785d08913a3e939772894578039f1a54\",\"license\":\"MIT\"},\"src/facets/RankifyInstanceGameMastersFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {LibArray} from \\\"../libraries/LibArray.sol\\\";\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {LibRankify} from \\\"../libraries/LibRankify.sol\\\";\\nimport {IRankifyInstanceCommons} from \\\"../interfaces/IRankifyInstanceCommons.sol\\\";\\nimport \\\"../abstracts/DiamondReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../abstracts/draft-EIP712Diamond.sol\\\";\\nimport {RankToken} from \\\"../tokens/RankToken.sol\\\";\\nimport {LibCoinVending} from \\\"../libraries/LibCoinVending.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../vendor/libraries/LibDiamond.sol\\\";\\n\\ncontract RankifyInstanceGameMastersFacet is DiamondReentrancyGuard, EIP712 {\\n    using LibTBG for uint256;\\n    using LibRankify for uint256;\\n    using LibTBG for LibTBG.GameInstance;\\n    event OverTime(uint256 indexed gameId);\\n    event LastTurn(uint256 indexed gameId);\\n    event ProposalScore(uint256 indexed gameId, uint256 indexed turn, string indexed proposalHash, string proposal, uint256  score);\\n    event TurnEnded(\\n        uint256 indexed gameId,\\n        uint256 indexed turn,\\n        address[] players,\\n        uint256[] scores,\\n        string[] newProposals,\\n        uint256[] proposerIndicies,\\n        uint256[][] votes\\n    );\\n\\n    event GameOver(uint256 indexed gameId, address[] indexed players, uint256[] indexed scores);\\n\\n    function checkSignature(bytes memory message, bytes memory signature, address account) public view returns (bool) {\\n        bytes32 typedHash = _hashTypedDataV4(keccak256(message));\\n        return SignatureChecker.isValidSignatureNow(account, typedHash, signature);\\n    }\\n\\n    function playerSalt(address player, bytes32 turnSalt) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(player, turnSalt));\\n    }\\n\\n    function _isValidSignature(\\n        bytes memory message,\\n        bytes memory signature,\\n        address account\\n    ) private view returns (bool) {\\n        return checkSignature(message, signature, account);\\n    }\\n\\n    function releaseAndReward(uint256 gameId, address player, address[] memory leaderboard) private {}\\n\\n    function onPlayersGameEnd(uint256 gameId, address player) private {\\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\\n        LibCoinVending.release(bytes32(gameId), game.createdBy, gameId.getLeaderBoard()[0], player);\\n    }\\n\\n    event ProposalSubmitted(\\n        uint256 indexed gameId,\\n        uint256 indexed turn,\\n        address indexed proposer,\\n        bytes32 commitmentHash,\\n        string proposalEncryptedByGM\\n    );\\n    struct ProposalParams {\\n        uint256 gameId;\\n        string encryptedProposal;\\n        bytes32 commitmentHash;\\n        address proposer;\\n    }\\n\\n    event VoteSubmitted(uint256 indexed gameId, uint256 indexed turn, address indexed player, string votesHidden);\\n\\n    function submitVote(uint256 gameId, string memory encryptedVotes, address voter) public {\\n        LibRankify.enforceIsGM(gameId, msg.sender);\\n        gameId.enforceGameExists();\\n        gameId.enforceHasStarted();\\n        require(!gameId.isGameOver(), \\\"Game over\\\");\\n        gameId.enforceIsPlayingGame(voter);\\n        require(gameId.getTurn() > 1, \\\"No proposals exist at turn 1: cannot vote\\\");\\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\\n        game.numVotesThisTurn += 1;\\n        game.playerVoted[voter] = true;\\n        gameId.tryPlayerMove(voter);\\n        emit VoteSubmitted(gameId, gameId.getTurn(), voter, encryptedVotes);\\n    }\\n\\n    function submitProposal(ProposalParams memory proposalData) public {\\n        proposalData.gameId.enforceGameExists();\\n        proposalData.gameId.enforceIsGM(msg.sender);\\n        require(!proposalData.gameId.isGameOver(), \\\"Game over\\\");\\n        proposalData.gameId.enforceHasStarted();\\n\\n        IRankifyInstanceCommons.RInstance storage game = proposalData.gameId.getGameStorage();\\n        require(LibTBG.getPlayersGame(proposalData.proposer) == proposalData.gameId, \\\"not a player\\\");\\n        require(!proposalData.gameId.isLastTurn(), \\\"Cannot propose in last turn\\\");\\n        require(bytes(proposalData.encryptedProposal).length != 0, \\\"Cannot propose empty\\\");\\n        require(game.proposalCommitmentHashes[proposalData.proposer] == \\\"\\\", \\\"Already proposed!\\\");\\n        uint256 turn = proposalData.gameId.getTurn();\\n        game.proposalCommitmentHashes[proposalData.proposer] = proposalData.commitmentHash;\\n        game.numCommitments += 1;\\n        proposalData.gameId.tryPlayerMove(proposalData.proposer);\\n        emit ProposalSubmitted(\\n            proposalData.gameId,\\n            turn,\\n            proposalData.proposer,\\n            proposalData.commitmentHash,\\n            proposalData.encryptedProposal\\n        );\\n    }\\n\\n\\n    // Clean up game instance for upcoming round\\n    function _beforeNextTurn(uint256 gameId) internal {\\n        address[] memory players = gameId.getPlayers();\\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\\n        game.numCommitments = 0;\\n        for (uint256 i = 0; i < players.length; i++) {\\n            game.proposalCommitmentHashes[players[i]] = bytes32(0);\\n            game.ongoingProposals[i] = \\\"\\\";\\n            game.playerVoted[players[i]] = false;\\n            game.votesHidden[players[i]].hash = bytes32(0);\\n        }\\n        // This data is to needed to correctly detetermine \\\"PlayerMove\\\" conditions during next turn\\n         game.numVotesPrevTurn = game.numVotesThisTurn;\\n         game.numVotesThisTurn = 0;\\n         game.numPrevProposals = game.numOngoingProposals;\\n         game.numOngoingProposals = 0;\\n    }\\n\\n    // Move new proposals in to ongoing proposals\\n    function _afterNextTurn(uint256 gameId, string[] memory newProposals) private {\\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\\n        for (uint256 i = 0; i < newProposals.length; i++) {\\n            game.ongoingProposals[i] = newProposals[i];\\n            game.numOngoingProposals += 1;\\n        }\\n\\n    }\\n\\n    function _nextTurn(uint256 gameId, string[] memory newProposals) private {\\n        _beforeNextTurn(gameId);\\n        (bool _isLastTurn, bool _isOvertime, bool _isGameOver, ) = gameId.nextTurn();\\n\\n        if (_isLastTurn && _isOvertime) {\\n            emit OverTime(gameId);\\n        }\\n        if (_isLastTurn) {\\n            emit LastTurn(gameId);\\n        }\\n        if (_isGameOver) {\\n            uint256[] memory finalScores = gameId.closeGame(LibDiamond.contractOwner(), onPlayersGameEnd);\\n            address[] memory players = gameId.getPlayers();\\n            emit GameOver(gameId, players, finalScores);\\n        }\\n        _afterNextTurn(gameId, newProposals);\\n    }\\n\\n    // newProposals array MUST be sorted randomly\\n    // votes and proposerIndicies MUST correspond to players array from game.getPlayers()\\n    function endTurn(\\n        uint256 gameId,\\n        uint256[][] memory votes,\\n        string[] memory newProposals, //REFERRING TO UPCOMING VOTING ROUND\\n        uint256[] memory proposerIndicies //REFERRING TO game.players index in PREVIOUS VOTING ROUND\\n    ) public {\\n        gameId.enforceIsGM(msg.sender);\\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\\n        require(!gameId.isGameOver(), \\\"Game over\\\");\\n        gameId.enforceHasStarted();\\n        uint256 turn = gameId.getTurn();\\n        if(turn != 1) {\\n            require(gameId.canEndTurnEarly() == true, \\\"endTurn->canEndTurnEarly\\\");\\n        }\\n        if (!gameId.isLastTurn()) {\\n            require(\\n                (game.numCommitments == gameId.getPlayers().length) || gameId.isTurnTimedOut(),\\n                \\\"Some players still have time to propose\\\"\\n            );\\n        }\\n        address[] memory players = gameId.getPlayers();\\n        if (turn != 1) {\\n            (,uint256[] memory roundScores) = gameId.calculateScoresQuadratic(votes, proposerIndicies);\\n            for(uint256  i = 0; i<players.length; i++)\\n            {\\n                string memory proposal = game.ongoingProposals[proposerIndicies[i]];\\n                emit ProposalScore(gameId,turn,proposal,proposal,roundScores[i]);\\n            }\\n        }\\n        (, uint256[] memory scores) = gameId.getScores();\\n         emit TurnEnded(gameId, gameId.getTurn(), players, scores, newProposals,proposerIndicies,votes);\\n        _nextTurn(gameId, newProposals);\\n    }\\n}\\n\",\"keccak256\":\"0xa7b6bd01ffb61028a8beff2dfc416d4e1139120751a77fb52e9268d0e6282a80\",\"license\":\"MIT\"},\"src/interfaces/ILockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\ninterface ILockableERC1155 is IERC1155 {\\n    event TokensLocked(address indexed account, uint256 indexed id, uint256 value);\\n    event TokensUnlocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    function lock(address account, uint256 id, uint256 amount) external;\\n\\n    function unlock(address account, uint256 id, uint256 amount) external;\\n\\n    function unlockedBalanceOf(address account, uint256 id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x899d6efe08cd566d18601d1e7975febe81a3152d9d01ed3ba7b21ffe37e50881\",\"license\":\"MIT\"},\"src/interfaces/IRankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ILockableERC1155} from \\\"./ILockableERC1155.sol\\\";\\n\\ninterface IRankToken is ILockableERC1155 {\\n    event RankingInstanceUpdated(address indexed newRankingInstance);\\n\\n    event LevelUp(address indexed account, uint256 id);\\n\\n    function mint(address to, uint256 amount, uint256 poolId, bytes memory data) external;\\n\\n    function batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    function levelUp(address to, uint256 id, bytes memory data) external;\\n\\n    /**\\n     * @dev Updates the address of the ranking instance contract.\\n     * @param newRankingInstance The new address of the ranking instance contract.\\n     */\\n    function updateRankingInstance(address newRankingInstance) external;\\n\\n    function getRankingInstance() external view returns (address);\\n\\n    function findNewRank(address account, uint256 oldRank) external view returns (uint256);\\n\\n    function getAccountRank(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x47399aed56679f0b38768afcb4969bc4d13fe5c073310a6e2db547d8c7a5af77\",\"license\":\"MIT\"},\"src/interfaces/IRankifyInstanceCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {LibCoinVending} from \\\"../libraries/LibCoinVending.sol\\\";\\nimport {LibQuadraticVoting} from \\\"../libraries/LibQuadraticVoting.sol\\\";\\n\\ninterface IRankifyInstanceCommons {\\n    struct Score {\\n        address participant;\\n        uint256 score;\\n    }\\n\\n    struct RInstanceSettings {\\n        uint256 gamePrice;\\n        address gamePaymentToken;\\n        uint256 joinGamePrice;\\n        uint256 numGames;\\n        address rankTokenAddress;\\n        bool contractInitialized;\\n        LibQuadraticVoting.qVotingStruct voting;\\n    }\\n\\n    struct RInstanceState {\\n        RInstanceSettings BestOfState;\\n        LibTBG.GameSettings TBGSEttings;\\n    }\\n\\n    // struct HiddenProposal {\\n    //     string cipherText; //encrypted with game masters key\\n    //     bytes32 hash; //plain proposal string hashed with current turn salt\\n    // }\\n\\n    struct VoteHidden {\\n        bytes32 hash;\\n        bytes proof;\\n    }\\n\\n    struct RInstance {\\n        uint256 rank;\\n        address createdBy;\\n        mapping(uint256 => string) ongoingProposals; //Previous Turn Proposals (These are being voted on)\\n        uint256 numOngoingProposals;\\n        uint256 numPrevProposals;\\n        mapping(address => bytes32) proposalCommitmentHashes; //Current turn Proposal submittion\\n        uint256 numCommitments;\\n        mapping(address => VoteHidden) votesHidden;\\n        address[] additionalRanks;\\n        uint256 paymentsBalance;\\n        uint256 numVotesThisTurn;\\n        uint256 numVotesPrevTurn;\\n        mapping(address => bool) playerVoted;\\n    }\\n\\n    event RegistrationOpen(uint256 indexed gameid);\\n    event PlayerJoined(uint256 indexed gameId, address participant);\\n    event GameStarted(uint256 indexed gameId);\\n    event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 indexed rank);\\n    event GameClosed(uint256 indexed gameId);\\n    event PlayerLeft(uint256 indexed gameId, address indexed player);\\n}\\n\",\"keccak256\":\"0xfb41df33d860527eb6ea9a3ae0d9f74c53b0ffa967f30d4e5b9dcaf93af09636\",\"license\":\"MIT\"},\"src/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibArray {\\n    function quickSort(uint256[] memory arr, int256 left, int256 right) internal view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] > pivot) i++;\\n            while (pivot > arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0xcb07e65b2b1c2b423be9bb76a51ef3aa3fe3b42abd42b57f9083f290f3999792\",\"license\":\"MIT\"},\"src/libraries/LibCoinVending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: Tim Pechersky <@Peersky>\\n\\npragma solidity ^0.8.20;\\n\\nimport {MockERC20} from \\\"../mocks/MockERC20.sol\\\";\\nimport {ERC1155Burnable} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\n/**\\n * @dev This library is used to simulate the vending machine coin acceptor state machine that:\\n *  - Supports large number of positions; Each represents requirements to acess different goods of the virtual vending machine.\\n *  - Accepts multiple assets of following types: Native (Eth), ERC20, ERC721, and ERC1155 tokens that can be stacked together.\\n *  - Allows for each individual asset action promise can be one of following:\\n *      - Lock: The asset is locked in the acceptor with promise that asset will be returned to the sender at release funds time.\\n *      - Bet: The asset is locked in the acceptor with promise that asset will be awarded to benificiary at release funds time.\\n *      - Pay: The asset is locked in the acceptor with promise that asset will be paid to payee at release funds time.\\n *      - Burn: The asset is locked in the acceptor with promise that asset will be destroyed at release funds time.\\n *  - Maintains each position balance, hence allowing multiple participants to line up for the same position.\\n *  - Allows three actions:\\n *      - Fund position with assets\\n *      - Refund assets to user\\n *      - Consume assets and provide goods to user\\n *      - Consuming asset might take a form of\\n *      - Transferring assets to payee\\n *      - Burning assets\\n *      - Awarding beneficiary with assets\\n *      - Returning locked assets back to sender\\n *\\n * This library DOES enforces that any position can only be refunded or processed only within amount funded boundaries\\n * This library DOES NOT store the addresses of senders, nor benificiaries, nor payees.\\n * This is to be stored within implementation contract.\\n *\\n *\\n *  !!!!! IMPORTANT !!!!!\\n * This library does NOT invocates reentrancy guards. It is implementation contract's responsibility to enforce reentrancy guards.\\n * Reentrancy guards MUST be implemented in an implementing contract.\\n *\\n *  Usage:\\n *\\n *  0. Configure position via configure(...)\\n *  1. fund position with assets via fund(...)\\n *  2. release or refund assets via release(...) or refund(...)\\n *  3. repeat steps 1 and 2 as needed.\\n *  Position can be recofigured at any time when it's effective balance is zero: `timesFunded - timesRefuned - timesReleased = 0`\\n *\\n *\\n * Test state:\\n * This library most functionality has been tested: see ../tests/LibCoinVending.ts and ../tests/report.md for details.\\n *\\n * ERC721 token is checked only for \\\"HAVE\\\" condition since putting requirements on non fungable token id yet to be resolved.\\n * (see ERC721 section in the code below)\\n *\\n * This library has not been yet audited\\n *\\n */\\nlibrary LibCoinVending {\\n    struct Condition {\\n        mapping(ContractTypes => mapping(address => mapping(uint256 => ContractCondition))) contracts;\\n        NumericCondition ethValues;\\n        uint256 timesRefunded;\\n        uint256 timesReleased;\\n        uint256 timesFunded;\\n        ContractTypes[] contractTypes;\\n        address[] contractAddresses;\\n        uint256[] contractIds;\\n        bool _isConfigured;\\n    }\\n    enum RequirementTypes {\\n        HAVE,\\n        LOCK,\\n        BURN,\\n        BET,\\n        PAY\\n    }\\n\\n    struct TransactionProperties {\\n        bytes data;\\n        uint256 amount;\\n    }\\n    struct ContractCondition {\\n        TransactionProperties have;\\n        TransactionProperties lock;\\n        TransactionProperties burn;\\n        TransactionProperties pay;\\n        TransactionProperties bet;\\n    }\\n\\n    struct NumericCondition {\\n        uint256 have;\\n        uint256 lock;\\n        uint256 burn;\\n        uint256 pay;\\n        uint256 bet;\\n    }\\n\\n    enum TransferTypes {\\n        FUND,\\n        REFUND,\\n        RELEASE\\n    }\\n\\n    struct ConditionReturn {\\n        NumericCondition ethValues;\\n        uint256 timesRefunded;\\n        uint256 timesReleased;\\n        uint256 timesFunded;\\n        address[] contractAddresses;\\n        uint256[] contractIds;\\n        ContractTypes[] contractTypes;\\n        bool _isConfigured;\\n    }\\n\\n    struct configSmartRequirement {\\n        address contractAddress;\\n        uint256 contractId;\\n        ContractTypes contractType;\\n        ContractCondition contractRequirement;\\n    }\\n\\n    struct ConfigPosition {\\n        NumericCondition ethValues;\\n        configSmartRequirement[] contracts;\\n    }\\n\\n    struct LibCoinVendingStorage {\\n        mapping(bytes32 => Condition) positions;\\n        address beneficiary;\\n    }\\n\\n    enum ContractTypes {\\n        ERC20,\\n        ERC1155,\\n        ERC721\\n    }\\n\\n    bytes32 constant COIN_VENDING_STORAGE_POSITION = keccak256(\\\"coin.vending.storage.position\\\");\\n\\n    function coinVendingPosition(bytes32 position) internal view returns (Condition storage) {\\n        return coinVendingStorage().positions[keccak256(abi.encode(position))];\\n    }\\n\\n    function coinVendingStorage() internal pure returns (LibCoinVendingStorage storage es) {\\n        bytes32 position = COIN_VENDING_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function trasferFromAny(address erc20Addr, address from, address to, uint256 value) private {\\n        MockERC20 token = MockERC20(erc20Addr);\\n        if (value != 0) {\\n            if (from == address(this)) {\\n                if (to != address(0)) {\\n                    token.transfer(to, value);\\n                } else {\\n                    token.burn(value);\\n                }\\n            } else {\\n                if (to != address(0)) {\\n                    token.transferFrom(from, to, value);\\n                } else {\\n                    token.transferFrom(from, address(this), value);\\n                    token.burn(value);\\n                }\\n            }\\n        }\\n    }\\n\\n    function fulfillERC20(\\n        address erc20Addr,\\n        ContractCondition storage tokenReq,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        trasferFromAny(erc20Addr, from, lockAddress, tokenReq.lock.amount);\\n        trasferFromAny(erc20Addr, from, burnAddress, tokenReq.burn.amount);\\n        trasferFromAny(erc20Addr, from, payee, tokenReq.pay.amount);\\n        trasferFromAny(erc20Addr, from, beneficiary, tokenReq.bet.amount);\\n        MockERC20 token = MockERC20(erc20Addr);\\n        uint256 value = tokenReq.have.amount;\\n        if (value != 0 && from != address(this)) {\\n            require(token.balanceOf(from) >= value, \\\"Not enough erc20 tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC721\\n     * Due to non fungable nature it's an open question how to implement this method correctly for lock/burn/pay/bet cases.\\n     * In this library I assume that requirements are for multiple members, hence it makes no sense to put requirement on particular tokenId for ERC721.\\n     * I think best approach would be to split in to two methods:\\n     *  1. fulfillERC72Balance: Treats tokens as fungible - requires one to lock/burn/pay/bet ANY token id, but in total should be equal to desired value.\\n     *  2. fulfillERC721Ids: Requires one to lock/burn/pay/bet specific token id. (useful when requirements are unique per applicant).\\n     * fulfillERC72Balance is easy. fulfillERC721Ids brings up a question of how to select those ID's(since must specify for ERC721 contract on transfer method).\\n     *  Two possible solutions:\\n     *  1: modify fund() method to accept array of address+id pairs of NFT's and parse trough it. Compucationaly inefficient.\\n     *  2: implement onERC721Received such that there is NFT vault in the contract, later fill funding position from that vault. That way applicant could pre-send NFT's to the contract and callfing fund later would pull those out from the vault.\\n     */\\n    function fulfillERC72Balance(\\n        address erc721addr,\\n        // uint256 id,\\n        ContractCondition storage tokenReq,\\n        address from // address payee, // address beneficiary, // address burnAddress, // address lockAddress\\n    ) private view {\\n        ERC721 token = ERC721(erc721addr);\\n\\n        require(\\n            tokenReq.lock.amount == 0 &&\\n                tokenReq.burn.amount == 0 &&\\n                tokenReq.pay.amount == 0 &&\\n                tokenReq.bet.amount == 0,\\n            \\\"ERC721 transfers not supported\\\"\\n        );\\n        if (tokenReq.have.amount != 0 && from != address(this)) {\\n            uint256 balance = token.balanceOf(from);\\n            require(balance >= tokenReq.have.amount, \\\"Not enough ERC721 balance\\\");\\n        }\\n    }\\n\\n    //    function fulfillERC721Ids() private\\n    //    {\\n\\n    //    }\\n\\n    function fulfillERC1155(\\n        address erc1155addr,\\n        uint256 id,\\n        ContractCondition storage tokenReq,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        ERC1155Burnable token = ERC1155Burnable(erc1155addr);\\n        uint256 value = tokenReq.have.amount;\\n        if (value != 0) {\\n            uint256 balance = token.balanceOf(from, id);\\n            require(balance >= value, \\\"ERC1155 balance is not valid\\\");\\n        }\\n        value = tokenReq.pay.amount;\\n        if (value != 0) {\\n            // token.transfe\\n            token.safeTransferFrom(from, payee, id, value, tokenReq.pay.data);\\n        }\\n        value = tokenReq.bet.amount;\\n        if (value != 0) {\\n            token.safeTransferFrom(from, beneficiary, id, value, tokenReq.bet.data);\\n        }\\n        value = tokenReq.burn.amount;\\n        if (value != 0) {\\n            if (burnAddress == address(0)) {\\n                token.burn(from, id, value);\\n            } else {\\n                token.safeTransferFrom(from, burnAddress, id, value, tokenReq.burn.data);\\n            }\\n        }\\n        value = tokenReq.lock.amount;\\n        if (value != 0) {\\n            token.safeTransferFrom(from, lockAddress, id, value, tokenReq.lock.data);\\n        }\\n    }\\n\\n    /**\\n     * @dev takes pre-configured position from storage and ensures tokens are transferred in according to position requirements\\n     * @param position - requirements\\n     * @param from - who is fulfilling\\n     * @param payee - payments receiver\\n     * @param beneficiary - stakes receiver\\n     * @param burnAddress - assets to burn receiver\\n     * @param lockAddress - locked assets receiver\\n     * wrap within reentrancy in implementation\\n     */\\n    function fulfill(\\n        Condition storage position,\\n        address from,\\n        address payee,\\n        address beneficiary,\\n        address burnAddress,\\n        address lockAddress\\n    ) private {\\n        if (from == address(this)) {\\n            if (position.ethValues.lock != 0) {\\n                payable(lockAddress).transfer(position.ethValues.lock);\\n            }\\n            if (position.ethValues.pay != 0) {\\n                payable(payee).transfer(position.ethValues.pay);\\n            }\\n            if (position.ethValues.bet != 0) {\\n                payable(beneficiary).transfer(position.ethValues.bet);\\n            }\\n            if (position.ethValues.burn != 0) {\\n                payable(burnAddress).transfer(position.ethValues.burn);\\n            }\\n        } else {\\n            uint256 VLReq = position.ethValues.lock +\\n                position.ethValues.pay +\\n                position.ethValues.bet +\\n                position.ethValues.burn;\\n            require(msg.value >= VLReq, \\\"msg.value too low\\\");\\n        }\\n        for (uint256 i = 0; i < position.contractAddresses.length; i++) {\\n            address contractAddress = position.contractAddresses[i];\\n            uint256 id = position.contractIds[i];\\n            ContractTypes contractType = position.contractTypes[i];\\n            ContractCondition storage requirement = position.contracts[contractType][contractAddress][id];\\n            if (contractType == ContractTypes.ERC20) {\\n                fulfillERC20(contractAddress, requirement, from, payee, beneficiary, burnAddress, lockAddress);\\n            } else if (contractType == ContractTypes.ERC721) {\\n                fulfillERC72Balance(\\n                    contractAddress,\\n                    // id,\\n                    requirement,\\n                    from\\n                    // payee,\\n                    // beneficiary,\\n                    // burnAddress,\\n                    // lockAddress\\n                );\\n            } else if (contractType == ContractTypes.ERC1155) {\\n                fulfillERC1155(contractAddress, id, requirement, from, payee, beneficiary, burnAddress, lockAddress);\\n            }\\n        }\\n    }\\n\\n    function _refund(Condition storage reqPos, address to) private {\\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \\\"Not enough balance to refund\\\");\\n        fulfill(reqPos, address(this), to, to, to, to);\\n        reqPos.timesRefunded += 1;\\n    }\\n\\n    /**\\n     * @dev returns all position requirements back to fundee\\n     * wrap within reentrancy guard in implementation\\n     */\\n    function refund(bytes32 position, address to) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _refund(reqPos, to);\\n    }\\n\\n    /**\\n     * @dev batch refund()\\n     * wrap within reentrancy guard in implementation\\n     */\\n    function batchRefund(bytes32 position, address[] memory returnAddresses) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        for (uint256 i = 0; i < returnAddresses.length; i++) {\\n            _refund(reqPos, returnAddresses[i]);\\n        }\\n    }\\n\\n    function _release(Condition storage reqPos, address payee, address beneficiary, address returnAddress) private {\\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \\\"Not enough balance to release\\\");\\n        fulfill(reqPos, address(this), payee, beneficiary, address(0), returnAddress);\\n        reqPos.timesReleased += 1;\\n    }\\n\\n    /**\\n     * @dev releases all position requirements to payee, beneficiary and locked assets to return address\\n     * @param position - requirements\\n     * @param payee - payments receiver\\n     * @param beneficiary - stakes receiver\\n     * @param returnAddress - locked assets receiver\\n     * wrap within reentrancy guard in implementation\\n     */\\n    function release(bytes32 position, address payee, address beneficiary, address returnAddress) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _release(reqPos, payee, beneficiary, returnAddress);\\n    }\\n\\n    function batchRelease(\\n        bytes32 position,\\n        address payee,\\n        address beneficiary,\\n        address[] memory returnAddresses\\n    ) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        for (uint256 i = 0; i < returnAddresses.length; i++) {\\n            {\\n                _release(reqPos, payee, beneficiary, returnAddresses[i]);\\n            }\\n        }\\n    }\\n\\n    function _fund(Condition storage reqPos, address funder) private {\\n        require(reqPos._isConfigured, \\\"Position does not exist\\\");\\n        fulfill(reqPos, funder, address(this), address(this), address(this), address(this));\\n        reqPos.timesFunded += 1;\\n    }\\n\\n    /**\\n     * @dev funds the position by msg.sender\\n     * @param position - requirements\\n     * wrap within reentrancy guard in implementation\\n     */\\n    function fund(bytes32 position) internal {\\n        Condition storage reqPos = coinVendingPosition(position);\\n        _fund(reqPos, msg.sender);\\n    }\\n\\n    /**\\n     * @dev configures the position\\n     * @param position - position identifier\\n     * @param configuration - requirements\\n     */\\n    function configure(bytes32 position, ConfigPosition memory configuration) internal {\\n        Condition storage mustDo = coinVendingPosition(position);\\n        require(\\n            mustDo.timesFunded == 0 || (mustDo.timesFunded == (mustDo.timesRefunded + mustDo.timesReleased)),\\n            \\\"Cannot mutate position with currently positive balance\\\"\\n        );\\n        mustDo.ethValues = configuration.ethValues;\\n        delete mustDo.contractAddresses;\\n        delete mustDo.contractIds;\\n        delete mustDo.contractTypes;\\n        for (uint256 i = 0; i < configuration.contracts.length; i++) {\\n            mustDo.contractAddresses.push(configuration.contracts[i].contractAddress);\\n            mustDo.contractIds.push(configuration.contracts[i].contractId);\\n            mustDo.contractTypes.push(configuration.contracts[i].contractType);\\n            mustDo.contracts[configuration.contracts[i].contractType][configuration.contracts[i].contractAddress][\\n                configuration.contracts[i].contractId\\n            ] = configuration.contracts[i].contractRequirement;\\n        }\\n        mustDo._isConfigured = true;\\n    }\\n\\n    /**\\n     * @dev gets position requrements struct\\n     * @param position - position identifier\\n     */\\n    function getPosition(bytes32 position) internal view returns (ConditionReturn memory) {\\n        Condition storage pos = coinVendingPosition(position);\\n        ConditionReturn memory ret;\\n        ret.ethValues = pos.ethValues;\\n        ret.timesFunded = pos.timesFunded;\\n        ret.timesRefunded = pos.timesRefunded;\\n        ret.timesReleased = pos.timesReleased;\\n        ret._isConfigured = pos._isConfigured;\\n        ret.contractAddresses = pos.contractAddresses;\\n        ret.contractIds = pos.contractIds;\\n        ret.contractTypes = pos.contractTypes;\\n        return ret;\\n    }\\n\\n    /**\\n     * @dev gets position requrements struct from a particular required contract\\n     * @param position - position identifier\\n     * @param contractAddress - contract address\\n     * @param contractId - contractId (needed for NFTs)\\n     */\\n    function getPositionByContract(\\n        bytes32 position,\\n        address contractAddress,\\n        uint256 contractId,\\n        ContractTypes contractType\\n    ) internal view returns (ContractCondition memory) {\\n        Condition storage pos = coinVendingPosition(position);\\n        return pos.contracts[contractType][contractAddress][contractId];\\n    }\\n}\\n\",\"keccak256\":\"0x52bc483de09df666e80cfc6b65ca584915e5ad2f183b5d7c8e11dfc7103403bb\",\"license\":\"MIT\"},\"src/libraries/LibEIP712Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IDiamondCut} from \\\"../vendor/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibEIP712WithStorage {\\n    bytes32 constant EIP712_STORAGE_POSITION = keccak256(\\\"EIP.712.STORAGE.POSITION\\\");\\n\\n    struct LibEIP712WithStorageStorage {\\n        bytes32 _CACHED_DOMAIN_SEPARATOR;\\n        uint256 _CACHED_CHAIN_ID;\\n        address _CACHED_THIS;\\n        bytes32 _HASHED_NAME;\\n        bytes32 _HASHED_VERSION;\\n        bytes32 _TYPE_HASH;\\n    }\\n\\n    function EIP712WithStorage() internal pure returns (LibEIP712WithStorageStorage storage ds) {\\n        bytes32 position = EIP712_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x630caa1a57dddf5e609dc42a371b4c17c9544a6100e4018bbfd257e6bf91b5d5\",\"license\":\"MIT\"},\"src/libraries/LibQuadraticVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nerror quadraticVotingError(string paramter, uint256 arg, uint256 arg2);\\n\\nlibrary LibQuadraticVoting {\\n    struct qVotingStruct {\\n        uint256 voteCredits;\\n        uint256 maxQuadraticPoints;\\n        uint256 minQuadraticPositons;\\n    }\\n\\n    function precomputeValues(\\n        uint256 voteCredits,\\n        uint256 minExpectedVoteItems\\n    ) internal pure returns (qVotingStruct memory) {\\n        qVotingStruct memory q;\\n\\n        q.maxQuadraticPoints = Math.sqrt(voteCredits);\\n\\n        // This block finds how many vote positions are needed to distribute all quadratic vote points.\\n        uint256 iterator = 0;\\n        uint256 accumulator = 0;\\n        do {\\n            iterator++;\\n            accumulator += iterator ** 2;\\n        } while (accumulator < voteCredits);\\n        // This enforces requirement that all vote credits can indeed be spended (no leftovers)\\n        if (accumulator != voteCredits)\\n             require(false, 'quadraticVotingError'); //revert quadraticVotingError(\\\"voteCredits bust be i^2 series\\\", accumulator, voteCredits);\\n        q.minQuadraticPositons = iterator;\\n        // In order to spend all vote credits there must be at least minQuadraticPositons+1 (becuase proposer is also a player and cannot vote for himself)\\n        if (minExpectedVoteItems <= q.minQuadraticPositons)  require(false, 'quadraticVotingError');\\n            // revert quadraticVotingError(\\n            //     \\\"Minimum Voting positions above min players\\\",\\n            //     q.minQuadraticPositons,\\n            //     minExpectedVoteItems\\n            // );\\n        q.voteCredits = voteCredits;\\n        return q;\\n    }\\n\\n    // function computeScoreByVPIndex(\\n    //     qVotingStruct memory q,\\n    //     uint256[][] memory VotersVotes,\\n    //     bool[] memory voterVoted,\\n    //     uint256 notVotedGivesEveyone,\\n    //     uint256 proposerIdx\\n    // ) internal pure returns (uint256) {\\n    //     uint256 score = 0;\\n    //     for (uint256 i = 0; i < VotersVotes.length; i++) {\\n    //         // For each potential voter\\n    //         if (i != proposerIdx) {\\n    //             // Calculate scores only for cases when voter is not proposer\\n    //             uint256 creditsUsed = 0;\\n    //             uint256[] memory voterVotes = VotersVotes[i];\\n\\n    //             if (!voterVoted[i]) {\\n    //                 // Check if voter wasn't voting\\n    //                 score += notVotedGivesEveyone; // Gives benefits to everyone but himself\\n    //                 creditsUsed = q.voteCredits;\\n    //             } else {\\n    //                 for (uint256 vi = 0; vi < voterVotes.length; vi++) {\\n    //                     if (voterVotes[vi] != 0)\\n    //                         revert quadraticVotingError(\\\"Voting for yourself not allowed\\\", i, voterVotes[y]);\\n    //                     score += voterVotes[proposerIdx];\\n    //                     creditsUsed += voterVotes[proposerIdx] ** 2;\\n    //                 }\\n    //             }\\n\\n    //             if (creditsUsed > q.voteCredits)\\n    //                 revert quadraticVotingError(\\\"Quadratic: vote credits overrun\\\", q.voteCredits, creditsUsed);\\n    //         }\\n    //     }\\n    //     return score;\\n    // }\\n\\n    function computeScoresByVPIndex(\\n        qVotingStruct memory q,\\n        uint256[][] memory VotersVotes,\\n        bool[] memory voterVoted,\\n        uint256 notVotedGivesEveyone,\\n        uint256 proposalsLength\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory scores = new uint256[](proposalsLength);\\n        uint256[] memory creditsUsed = new uint256[](VotersVotes.length);\\n\\n        for (uint256 proposalIdx = 0; proposalIdx < proposalsLength; proposalIdx++) {\\n            //For each proposal\\n            scores[proposalIdx] = 0;\\n            for (uint256 vi = 0; vi < VotersVotes.length; vi++) {\\n                // For each potential voter\\n                uint256[] memory voterVotes = VotersVotes[vi];\\n                if (!voterVoted[vi]) {\\n                    // Check if voter wasn't voting\\n                    scores[proposalIdx] += notVotedGivesEveyone; // Gives benefits to everyone but himself\\n                    creditsUsed[vi] = q.voteCredits;\\n                } else {\\n                    //If voter voted\\n                    scores[proposalIdx] += voterVotes[proposalIdx];\\n                    creditsUsed[vi] += voterVotes[proposalIdx] ** 2;\\n                    if (creditsUsed[vi] > q.voteCredits)\\n                        require(false, 'quadraticVotingError'); // revert quadraticVotingError(\\\"Quadratic: vote credits overrun\\\", q.voteCredits, creditsUsed[vi]);\\n                }\\n            }\\n        }\\n        return scores;\\n    }\\n}\\n\",\"keccak256\":\"0x1103c49483ce6aef1ba3947c7aa0e4aebd0a2bf95e601ef284b7dff4a387b2e4\",\"license\":\"MIT\"},\"src/libraries/LibRankify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {IRankifyInstanceCommons} from \\\"../interfaces/IRankifyInstanceCommons.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {LibQuadraticVoting} from \\\"./LibQuadraticVoting.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibRankify {\\n    using LibTBG for LibTBG.GameInstance;\\n    using LibTBG for uint256;\\n    using LibTBG for LibTBG.GameSettings;\\n    using LibQuadraticVoting for LibQuadraticVoting.qVotingStruct;\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function getGameStorage(uint256 gameId) internal view returns (IRankifyInstanceCommons.RInstance storage game) {\\n        bytes32 position = LibTBG.getGameDataStorage(gameId);\\n        assembly {\\n            game.slot := position\\n        }\\n    }\\n\\n    function RInstanceStorage() internal pure returns (IRankifyInstanceCommons.RInstanceSettings storage bog) {\\n        bytes32 position = LibTBG.getDataStorage();\\n        assembly {\\n            bog.slot := position\\n        }\\n    }\\n\\n    bytes32 internal constant _PROPOSAL_PROOF_TYPEHASH =\\n        keccak256(\\\"signProposalByGM(uint256 gameId,uint256 turn,bytes32 proposalNHash,string encryptedProposal)\\\");\\n    bytes32 internal constant _VOTE_PROOF_TYPEHASH =\\n        keccak256(\\\"signVote(uint256 vote1,uint256 vote2,uint256 vote3,uint256 gameId,uint256 turn,bytes32 salt)\\\");\\n    bytes32 internal constant _VOTE_SUBMIT_PROOF_TYPEHASH =\\n        keccak256(\\\"publicSignVote(uint256 gameId,uint256 turn,bytes32 vote1,bytes32 vote2,bytes32 vote3)\\\");\\n\\n    function enforceIsInitialized() internal view {\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        require(settings.contractInitialized, \\\"onlyInitialized\\\");\\n    }\\n\\n    function enforceGameExists(uint256 gameId) internal view {\\n        enforceIsInitialized();\\n        require(gameId.gameExists(), \\\"no game found\\\");\\n    }\\n\\n    function newGame(uint256 gameId, address gameMaster, uint256 gameRank, address creator) internal {\\n        LibRankify.enforceIsInitialized();\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        gameId.createGame(gameMaster); // This will enforce game does not exist yet\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        require(gameRank != 0, \\\"game rank not specified\\\");\\n        if (settings.gamePrice != 0) {\\n            IERC20(settings.gamePaymentToken).transferFrom(creator, address(this), settings.gamePrice);\\n            game.paymentsBalance = settings.gamePrice;\\n        }\\n\\n        game.createdBy = creator;\\n        settings.numGames += 1;\\n        game.rank = gameRank;\\n\\n        IRankToken rankTokenContract = IRankToken(settings.rankTokenAddress);\\n        rankTokenContract.mint(address(this), 1, gameRank + 1, \\\"\\\");\\n        rankTokenContract.mint(address(this), 3, gameRank, \\\"\\\");\\n    }\\n\\n    function enforceIsGameCreator(uint256 gameId, address candidate) internal view {\\n        enforceGameExists(gameId);\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        require(game.createdBy == candidate, \\\"Only game creator\\\");\\n    }\\n\\n    function enforceIsGM(uint256 gameId, address candidate) internal view {\\n        enforceGameExists(gameId);\\n        require(gameId.getGM() == candidate, \\\"Only game master\\\");\\n    }\\n\\n    function _fulfillRankRq(address player, uint256 gameRank, address rankTokenAddress) private {\\n        IRankToken rankToken = IRankToken(rankTokenAddress);\\n        rankToken.lock(player, gameRank, 1);\\n    }\\n\\n    function joinGame(uint256 gameId, address player) internal {\\n        enforceGameExists(gameId);\\n        fulfillRankRq(gameId, player);\\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\\n        if (_RInstance.joinGamePrice != 0) {\\n            IERC20(_RInstance.gamePaymentToken).transferFrom(player, address(this), _RInstance.joinGamePrice);\\n            IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n            game.paymentsBalance += _RInstance.joinGamePrice;\\n        }\\n        gameId.addPlayer(player);\\n    }\\n\\n    function closeGame(\\n        uint256 gameId,\\n        address beneficiary,\\n        function(uint256, address) playersGameEndedCallback\\n    ) internal returns (uint256[] memory) {\\n        enforceGameExists(gameId);\\n        emitRankRewards(gameId, gameId.getLeaderBoard());\\n        (, uint256[] memory finalScores) = gameId.getScores();\\n        address[] memory players = gameId.getPlayers();\\n        for (uint256 i = 0; i < players.length; i++) {\\n            removeAndUnlockPlayer(gameId, players[i]);\\n            playersGameEndedCallback(gameId, players[i]);\\n        }\\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = LibRankify.RInstanceStorage();\\n        IERC20(_RInstance.gamePaymentToken).transfer(beneficiary, (_RInstance.joinGamePrice * players.length) + _RInstance.gamePrice);\\n        return finalScores;\\n    }\\n\\n    function quitGame(\\n        uint256 gameId,\\n        address player,\\n        bool slash,\\n        function(uint256, address) onPlayerLeftCallback\\n    ) internal {\\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\\n        if (_RInstance.joinGamePrice != 0) {\\n            uint256 divideBy = slash ? 2 : 1;\\n            uint256 paymentRefund = _RInstance.joinGamePrice / divideBy;\\n            IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n            game.paymentsBalance -= paymentRefund;\\n            IERC20(_RInstance.gamePaymentToken).transfer(player, paymentRefund);\\n        }\\n        removeAndUnlockPlayer(gameId, player); // this will throw if game has started or doesnt exist\\n        onPlayerLeftCallback(gameId, player);\\n    }\\n\\n    function cancelGame(uint256 gameId, function(uint256, address) onPlayerLeftCallback, address beneficiary) internal {\\n        address[] memory players = gameId.getPlayers();\\n        for (uint256 i = 0; i < players.length; i++) {\\n            quitGame(gameId, players[i], false, onPlayerLeftCallback); //this will throw if game has started or doesnt exist\\n        }\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\\n        uint256 paymentRefund = _RInstance.gamePrice / 2;\\n        IERC20(_RInstance.gamePaymentToken).transfer(game.createdBy, paymentRefund);\\n        game.paymentsBalance -= paymentRefund;\\n        IERC20(_RInstance.gamePaymentToken).transfer(beneficiary, game.paymentsBalance);\\n        game.paymentsBalance = 0;\\n        gameId.deleteGame();\\n    }\\n\\n    function fulfillRankRq(uint256 gameId, address player) internal {\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        if (game.rank > 1) {\\n            _fulfillRankRq(player, game.rank, settings.rankTokenAddress);\\n            for (uint256 i = 0; i < game.additionalRanks.length; i++) {\\n                _fulfillRankRq(player, game.rank, game.additionalRanks[i]);\\n            }\\n        }\\n    }\\n\\n    function emitRankReward(uint256 gameId, address[] memory leaderboard, address rankTokenAddress) private {\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        IRankToken rankTokenContract = IRankToken(rankTokenAddress);\\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[0], game.rank + 1, 1, \\\"\\\");\\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[1], game.rank, 2, \\\"\\\");\\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[2], game.rank, 1, \\\"\\\");\\n    }\\n\\n    function emitRankRewards(uint256 gameId, address[] memory leaderboard) internal {\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = LibRankify.RInstanceStorage();\\n        emitRankReward(gameId, leaderboard, settings.rankTokenAddress);\\n        for (uint256 i = 0; i < game.additionalRanks.length; i++) {\\n            emitRankReward(gameId, leaderboard, game.additionalRanks[i]);\\n        }\\n    }\\n\\n    function _releaseRankToken(address player, uint256 gameRank, address rankTokenAddress) private {\\n        IRankToken rankToken = IRankToken(rankTokenAddress);\\n        rankToken.unlock(player, gameRank, 1);\\n    }\\n\\n    function removeAndUnlockPlayer(uint256 gameId, address player) internal {\\n        enforceGameExists(gameId);\\n        gameId.removePlayer(player); //This will throw if game is in the process\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        if (game.rank > 1) {\\n            _releaseRankToken(player, game.rank, settings.rankTokenAddress);\\n            for (uint256 i = 0; i < game.additionalRanks.length; i++) {\\n                _releaseRankToken(player, game.rank, game.additionalRanks[i]);\\n            }\\n        }\\n    }\\n\\n    function tryPlayerMove(uint256 gameId, address player) internal returns (bool) {\\n        uint256 turn = gameId.getTurn();\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        bool expectVote = true;\\n        bool expectProposal = true;\\n        if (turn == 1)\\n            expectVote = false; //Dont expect votes at firt turn\\n        else if (gameId.isLastTurn()) expectProposal = false; //Dont expect proposals at last turn\\n        if (game.numPrevProposals < settings.voting.minQuadraticPositons) expectVote = false; // If there is not enough proposals then round is skipped votes cannot be filled\\n        bool madeMove = true;\\n        if (expectVote && !game.playerVoted[player]) madeMove = false;\\n        if (expectProposal && game.proposalCommitmentHashes[player] == \\\"\\\") madeMove = false;\\n        // console.log(\\\"made move\\\", madeMove, expectProposal);\\n        // console.log(game.proposalCommitmentHashes[player] == \\\"\\\", game.playerVoted[player]);\\n        if (madeMove) gameId.playerMove(player);\\n        return madeMove;\\n    }\\n\\n    //prevProposersRevealed MUST be submitted sorted according to proposals in ongoingProposals map\\n    function calculateScoresQuadratic(\\n        uint256 gameId,\\n        uint256[][] memory votesRevealed,\\n        uint256[] memory proposerIndicies\\n    ) internal returns (uint256[] memory, uint256[] memory) {\\n        address[] memory players = gameId.getPlayers();\\n        uint256[] memory scores = new uint256[](players.length);\\n        uint256[] memory roundScores = new uint256[](players.length);\\n        bool[] memory playerVoted = new bool[](players.length);\\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\\n        // Convert mappiing to array to pass it to libQuadratic\\n        for (uint256 i = 0; i < players.length; i++) {\\n            playerVoted[i] = game.playerVoted[players[i]];\\n        }\\n        roundScores = settings.voting.computeScoresByVPIndex(\\n            votesRevealed,\\n            playerVoted,\\n            settings.voting.maxQuadraticPoints,\\n            proposerIndicies.length\\n\\n        );\\n        for (uint256 playerIdx = 0; playerIdx < players.length; playerIdx++) {\\n            //for each player\\n            if (proposerIndicies[playerIdx] < players.length) {\\n                //if player propposed exists\\n                scores[playerIdx] = gameId.getScore(players[playerIdx]) + roundScores[playerIdx];\\n                gameId.setScore(players[playerIdx], scores[playerIdx]);\\n            } else {\\n                //Player did not propose\\n            }\\n        }\\n        return (scores, roundScores);\\n    }\\n}\\n\",\"keccak256\":\"0x51a29f41bf1606d500b42e2f4e591bc3d00eea85fa2bdb1365568dd301b917fc\",\"license\":\"MIT\"},\"src/libraries/LibReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// import \\\"./LibDiamondOwner.sol\\\";\\n// import { IMultipass } from \\\"../interfaces/sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary LibReentrancyGuard {\\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\\\"reentrancyguard.storage.position\\\");\\n\\n    struct ReentrancyGuardStruct {\\n        bool _entered;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStruct storage ds) {\\n        bytes32 position = TBG_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ef038fdedc9d4857f9f190562c07849c9813fd4ae927a4e81cef94a29a3f5ed\",\"license\":\"MIT\"},\"src/libraries/LibTurnBasedGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {LibArray} from \\\"../libraries/LibArray.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary LibTBG {\\n    // using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    // using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct GameSettings {\\n        uint256 timePerTurn;\\n        uint256 maxPlayersSize;\\n        uint256 minPlayersSize;\\n        uint256 timeToJoin;\\n        uint256 maxTurns;\\n        uint256 numWinners;\\n        uint256 voteCredits;\\n        string subject;\\n    }\\n\\n    struct GameInstance {\\n        address gameMaster;\\n        uint256 currentTurn;\\n        uint256 turnStartedAt;\\n        uint256 registrationOpenAt;\\n        bool hasStarted;\\n        bool hasEnded;\\n        EnumerableSet.AddressSet players;\\n        mapping(address => bool) madeMove;\\n        uint256 numPlayersMadeMove;\\n        mapping(address => uint256) score;\\n        bytes32 implemenationStoragePointer;\\n        bool isOvertime;\\n        address[] leaderboard;\\n    }\\n\\n    struct TBGStorageStruct {\\n        GameSettings settings;\\n        mapping(uint256 => GameInstance) games;\\n        mapping(address => uint256) playerInGame;\\n        uint256 totalGamesCreated;\\n    }\\n\\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\\\"turnbasedgame.storage.position\\\");\\n    bytes32 constant IMPLEMENTATION_STORAGE_POSITION = keccak256(\\\"implementation.turnbasedgame.storage.position\\\");\\n\\n    function TBGStorage() internal pure returns (TBGStorageStruct storage es) {\\n        bytes32 position = TBG_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function _getGame(uint256 gameId) internal view returns (GameInstance storage) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.games[gameId];\\n    }\\n\\n    function init(GameSettings memory settings) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (settings.timePerTurn == 0) require(false, \\\"settings.timePerTurn\\\"); //  revert invalidConfiguration('timePerTurn');\\n        if (settings.maxPlayersSize == 0) require(false, \\\"settings.maxPlayersSize\\\"); // revert invalidConfiguration('maxPlayersSize');\\n        if (settings.minPlayersSize < 2) require(false, \\\"settings.minPlayersSize\\\"); //revert invalidConfiguration('minPlayersSize');\\n        if (settings.maxTurns == 0) require(false, \\\"settings.maxTurns\\\"); //revert invalidConfiguration('maxTurns');\\n        if (settings.numWinners == 0 || settings.numWinners >= settings.minPlayersSize)\\n            require(false, \\\"numWinners\\\"); //revert invalidConfiguration('numWinners');\\n        if (settings.timeToJoin == 0) require(false, \\\"timeToJoin\\\"); // revert invalidConfiguration('timeToJoin');\\n        if (settings.maxPlayersSize < settings.minPlayersSize) require(false, \\\"maxPlayersSize\\\"); //revert invalidConfiguration('maxPlayersSize');\\n        if (bytes(settings.subject).length == 0) require(false, \\\"subject length\\\"); //revert invalidConfiguration('subject length');\\n\\n        tbg.settings = settings;\\n    }\\n\\n    function createGame(uint256 gameId, address gm) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(!gameExists(gameId), \\\"createGame->Already exists\\\");\\n        require(gm != address(0), \\\"createGame->GM\\\");\\n        require(gameId != 0, \\\"createGame->gameId\\\");\\n        require(tbg.games[gameId].gameMaster == address(0), \\\"createGame->gameId\\\");\\n        tbg.games[gameId].gameMaster = gm;\\n        tbg.totalGamesCreated += 1;\\n\\n        //totalGamesCreated ensures nonce-like behaviur:\\n        //even if game would get deleted and re-created with same name, data storage would be different\\n        tbg.games[gameId].implemenationStoragePointer = keccak256(\\n            abi.encode(gameId, tbg.totalGamesCreated, TBG_STORAGE_POSITION)\\n        );\\n    }\\n\\n    function deleteGame(uint256 gameId) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        address[] memory players = _game.players.values();\\n        for (uint256 i = 0; i < players.length; i++) {\\n            tbg.games[gameId].score[players[i]] = 0;\\n            tbg.games[gameId].madeMove[players[i]] = false;\\n        }\\n        delete tbg.games[gameId].gameMaster;\\n        delete tbg.games[gameId].currentTurn;\\n        delete tbg.games[gameId].hasEnded;\\n        delete tbg.games[gameId].hasStarted;\\n        delete tbg.games[gameId].implemenationStoragePointer;\\n        delete tbg.games[gameId].isOvertime;\\n        delete tbg.games[gameId].leaderboard;\\n        delete tbg.games[gameId].numPlayersMadeMove;\\n        delete tbg.games[gameId].players;\\n        delete tbg.games[gameId].registrationOpenAt;\\n        delete tbg.games[gameId].turnStartedAt;\\n    }\\n\\n    function canBeJoined(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.hasStarted || _game.registrationOpenAt == 0) return false;\\n        return true;\\n    }\\n\\n    function addPlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameExists(gameId), \\\"addPlayer->invalid game\\\");\\n\\n        require(tbg.playerInGame[participant] == 0, \\\"addPlayer->Player in game\\\");\\n        GameInstance storage _game = _getGame(gameId);\\n        require(_game.players.length() < tbg.settings.maxPlayersSize, \\\"addPlayer->party full\\\");\\n\\n        require(canBeJoined(gameId), \\\"addPlayer->cant join now\\\");\\n        _game.players.add(participant);\\n        _game.madeMove[participant] = false;\\n        tbg.playerInGame[participant] = gameId;\\n    }\\n\\n    function isPlayerInGame(uint256 gameId, address player) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.playerInGame[player] == gameId ? true : false;\\n    }\\n\\n    function removePlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        require(gameExists(gameId), \\\"game does not exist\\\");\\n        require(tbg.playerInGame[participant] == gameId, \\\"Not in the game\\\");\\n        require(_game.hasStarted == false || _game.hasEnded == true, \\\"Cannot leave once started\\\");\\n        tbg.playerInGame[participant] = 0;\\n        _game.players.remove(participant);\\n    }\\n\\n    function isTurnTimedOut(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        assert(gameId != 0);\\n        assert(_game.hasStarted == true);\\n        if (block.timestamp <= tbg.settings.timePerTurn + _game.turnStartedAt) return false;\\n        return true;\\n    }\\n\\n    function gameExists(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.gameMaster != address(0)) return true;\\n        return false;\\n    }\\n\\n    function enforceHasStarted(uint256 gameId) internal view {\\n        GameInstance storage _game = _getGame(gameId);\\n        assert(gameId != 0);\\n        require(_game.hasStarted, \\\"Game has not yet started\\\");\\n    }\\n\\n    function canEndTurn(uint256 gameId) internal view returns (bool) {\\n        bool turnTimedOut = isTurnTimedOut(gameId);\\n        GameInstance storage _game = _getGame(gameId);\\n        if(!_game.hasStarted) return false;\\n        if (turnTimedOut) return true;\\n        return false;\\n    }\\n\\n    function canEndTurnEarly(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        bool everyoneMadeMove = (_game.numPlayersMadeMove) == _game.players.length() ? true : false;\\n        if(!_game.hasStarted) return false;\\n        if (everyoneMadeMove || canEndTurn(gameId)) return true;\\n        return false;\\n    }\\n\\n    modifier onlyInTurnTime(uint256 gameId) {\\n        require(isTurnTimedOut(gameId) == false, \\\"onlyInTurnTime -> turn timedout\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenTurnCanEnd(uint256 gameId) {\\n        require(canEndTurn(gameId) == true, \\\"onlyWhenTurnCanEnd: Not everyone made a move yet and there still is time\\\");\\n        _;\\n    }\\n\\n    function _clearCurrentMoves(GameInstance storage game) internal {\\n        for (uint256 i = 0; i < game.players.length(); i++) {\\n            address player = game.players.at(i);\\n            game.madeMove[player] = false;\\n        }\\n        game.numPlayersMadeMove = 0;\\n    }\\n\\n    function _resetPlayerStates(GameInstance storage game) internal {\\n        for (uint256 i = 0; i < game.players.length(); i++) {\\n            address player = game.players.at(i);\\n            game.madeMove[player] = false;\\n            game.score[player] = 0;\\n        }\\n    }\\n\\n    function setScore(uint256 gameId, address player, uint256 value) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        require(isPlayerInGame(gameId, player), \\\"player not in a game\\\");\\n        _game.score[player] = value;\\n    }\\n\\n    function getScore(uint256 gameId, address player) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.score[player];\\n    }\\n\\n    function getScores(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\\n        address[] memory players = getPlayers(gameId);\\n        uint256[] memory scores = new uint256[](players.length);\\n        for (uint256 i = 0; i < players.length; i++) {\\n            scores[i] = getScore(gameId, players[i]);\\n        }\\n        return (players, scores);\\n    }\\n\\n    function openRegistration(uint256 gameId) internal {\\n        require(gameExists(gameId), \\\"game not found\\\");\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.registrationOpenAt = block.timestamp;\\n    }\\n\\n    function isRegistrationOpen(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (_game.registrationOpenAt == 0) {\\n            return false;\\n        } else {\\n            return _game.registrationOpenAt < block.timestamp + tbg.settings.timeToJoin ? true : false;\\n        }\\n    }\\n\\n    function canStart(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        bool retval = canStartEarly(gameId);\\n        if (_game.players.length() < tbg.settings.minPlayersSize) retval = false;\\n        return retval;\\n    }\\n\\n    function canStartEarly(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        bool retval = true;\\n        if (_game.hasStarted != false) retval = false;\\n        if (_game.registrationOpenAt == 0) retval = false;\\n        if (block.timestamp <= _game.registrationOpenAt + tbg.settings.timeToJoin) retval = false;\\n        if (gameId == 0) retval = false;\\n        if (_game.players.length() + 1 == tbg.settings.maxPlayersSize) retval = false;\\n        return retval;\\n    }\\n\\n    function startGame(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(_game.hasStarted == false, \\\"startGame->already started\\\");\\n        require(_game.registrationOpenAt != 0, \\\"startGame->Game registration was not yet open\\\");\\n        require(block.timestamp > _game.registrationOpenAt + tbg.settings.timeToJoin, \\\"startGame->Still Can Join\\\");\\n        require(gameId != 0, \\\"startGame->Game not found\\\");\\n        require(_game.players.length() >= tbg.settings.minPlayersSize, \\\"startGame->Not enough players\\\");\\n        _game.hasStarted = true;\\n        _game.hasEnded = false;\\n        _game.currentTurn = 1;\\n        _game.turnStartedAt = block.timestamp;\\n        _resetPlayerStates(_game);\\n    }\\n\\n    function getTurn(uint256 gameId) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.currentTurn;\\n    }\\n\\n    function getGM(uint256 gameId) internal view returns (address) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.gameMaster;\\n    }\\n\\n    function isLastTurn(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.currentTurn == tbg.settings.maxTurns) return true;\\n        else return false;\\n    }\\n\\n    function isGameOver(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        if ((_game.currentTurn > tbg.settings.maxTurns) && !_game.isOvertime) return true;\\n        else return false;\\n    }\\n\\n    function enforceIsNotOver(uint256 gameId) internal view {\\n        require(!isGameOver(gameId), \\\"Game over\\\");\\n    }\\n\\n    function playerMove(uint256 gameId, address player) internal onlyInTurnTime(gameId) {\\n        GameInstance storage _game = _getGame(gameId);\\n        enforceHasStarted(gameId);\\n        enforceIsNotOver(gameId);\\n        require(_game.madeMove[player] == false, \\\"already made a move\\\");\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n        _game.madeMove[player] = true;\\n        _game.numPlayersMadeMove += 1;\\n    }\\n\\n    function enforceIsPlayingGame(uint256 gameId, address player) internal view\\n    {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n    }\\n\\n    function hasStarted(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.hasStarted;\\n    }\\n\\n    function getLeaderBoard(uint256 gameId) internal view returns (address[] memory) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.leaderboard;\\n    }\\n\\n    function nextTurn(uint256 gameId) internal returns (bool, bool, bool, address[] memory) {\\n        GameInstance storage _game = _getGame(gameId);\\n        enforceHasStarted(gameId);\\n        enforceIsNotOver(gameId);\\n        _clearCurrentMoves(_game);\\n        _game.currentTurn += 1;\\n        _game.turnStartedAt = block.timestamp;\\n        bool _isLastTurn = isLastTurn(gameId);\\n        bool _isOvertime = _game.isOvertime;\\n        address[] memory sortedLeaders = new address[](getPlayers(gameId).length);\\n        if (_isLastTurn || _game.isOvertime || isGameOver(gameId)) {\\n            (_isOvertime, sortedLeaders) = isSortedLeadersEqual(gameId);\\n            _game.isOvertime = _isOvertime;\\n        }\\n        _game.leaderboard = sortedLeaders;\\n        _game.hasEnded = isGameOver(gameId);\\n\\n        return (_isLastTurn, _isOvertime, _game.hasEnded, sortedLeaders);\\n    }\\n\\n    function getDataStorage() internal pure returns (bytes32 pointer) {\\n        return IMPLEMENTATION_STORAGE_POSITION;\\n    }\\n\\n    function getGameDataStorage(uint256 gameId) internal view returns (bytes32 pointer) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.implemenationStoragePointer;\\n    }\\n\\n    function getPlayersNumber(uint256 gameId) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.players.length();\\n    }\\n\\n    function getPlayers(uint256 gameId) internal view returns (address[] memory) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.players.values();\\n    }\\n\\n    function getGameSettings() internal view returns (GameSettings memory) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.settings;\\n    }\\n\\n    function enforceIsPreRegistrationStage(uint256 gameId) internal view {\\n        require(!isRegistrationOpen(gameId), \\\"Cannot do when registration is open\\\");\\n        require(!hasStarted(gameId), \\\"Cannot do when game started\\\");\\n    }\\n\\n    function addOvertime(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.isOvertime = true;\\n    }\\n\\n    function isOvertime(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.isOvertime;\\n    }\\n\\n    function resetOvertime(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.isOvertime = false;\\n    }\\n\\n    function isSortedLeadersEqual(uint256 gameId) internal view returns (bool, address[] memory) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\\n\\n        LibArray.quickSort(scores, int256(0), int256(scores.length - 1));\\n        for (uint256 i = 0; i < players.length - 1; i++) {\\n            if ((i <= tbg.settings.numWinners - 1)) {\\n                if (scores[i] == scores[i + 1]) {\\n                    return (true, players);\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n        return (false, players);\\n    }\\n\\n    function getPlayersGame(address player) internal view returns (uint256) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        return tbg.playerInGame[player];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x18b30e68f29649406b117361eefa13db63855126f6ef1ca82d9107a384f2d328\",\"license\":\"MIT\"},\"src/mocks/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\npragma solidity ^0.8.20;\\n\\ncontract MockERC20 is ERC20Burnable, Ownable {\\n    uint256 numTokens;\\n\\n    constructor(string memory name_, string memory symbol_, address owner) ERC20(name_, symbol_) {\\n        require(owner != address(0), \\\"must specify owner of the contract\\\");\\n        transferOwnership(owner);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        require(to != address(0), \\\"MockERC20->mint: Address not specified\\\");\\n        require(amount != 0, \\\"MockERC20->mint: amount not specified\\\");\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xed1f89d4961ad04a4b3966aeddd885577c5efd91199f39d41ab8f91af49cd24b\",\"license\":\"MIT\"},\"src/modifiers/OnlyOwnerDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"../vendor/libraries/LibDiamond.sol\\\";\\n\\n// import \\\"./interfaces/IERC173.sol\\\";\\n\\ncontract OnlyOwnerDiamond {\\n    modifier onlyOwner() {\\n        LibDiamond.enforceIsContractOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x998a3e35ca9f029367850b6f69be6a8ec98f26e1c7772d7958b918cea6a8dc26\",\"license\":\"MIT\"},\"src/tokens/RankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport \\\"../abstracts/CompositeERC1155.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\npragma solidity ^0.8.20;\\n\\ncontract RankToken is CompositeERC1155, Ownable, IRankToken {\\n    string private _contractURI;\\n    mapping(address => uint256) public rank;\\n    uint256 public topRank;\\n    address private _rankingInstance;\\n    uint256 _levelUpThreshold;\\n\\n    modifier onlyRankingInstance() {\\n        require(msg.sender == _rankingInstance, \\\"only ranking contract can do that\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory uri_,\\n        address owner_,\\n        string memory cURI,\\n        uint256 levelUpThreshold,\\n        address[] memory components,\\n        uint256[] memory componentWeights\\n    ) CompositeERC1155(uri_, components, componentWeights) {\\n        require(owner_ != address(0), \\\"must specify owner of the contract\\\");\\n        _contractURI = cURI;\\n        _levelUpThreshold = levelUpThreshold;\\n        transferOwnership(owner_);\\n    }\\n\\n    function getRankingInstance() public view returns (address) {\\n        return _rankingInstance;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function setURI(string memory uri_) public onlyOwner {\\n        _setURI(uri_);\\n    }\\n\\n    function setContractURI(string memory uri_) public onlyOwner {\\n        _contractURI = uri_;\\n    }\\n\\n    event Leader(address indexed account, uint256 indexed rank);\\n\\n    function _mintRank(address to, uint256 amount, uint256 level, bytes memory data) private {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amount != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(level != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        if (level > topRank) {\\n            topRank = level;\\n            emit Leader(to, level);\\n        }\\n        _mint(to, level, amount, data);\\n    }\\n\\n    function mint(address to, uint256 amount, uint256 level, bytes memory data) public onlyRankingInstance {\\n        _mintRank(to, amount, level, data);\\n    }\\n\\n    function updateRankingInstance(address newRankingInstance) public onlyOwner {\\n        require(newRankingInstance != address(0), \\\"must specify ranking instance\\\");\\n        _rankingInstance = newRankingInstance;\\n        emit RankingInstanceUpdated(newRankingInstance);\\n    }\\n\\n    function lock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) onlyRankingInstance {\\n        super.lock(account, id, amount);\\n    }\\n\\n    function unlock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) onlyRankingInstance {\\n        super.unlock(account, id, amount);\\n    }\\n\\n    function batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyRankingInstance {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amounts.length != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(ids.length != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function levelUp(address to, uint256 level, bytes memory data) public {\\n        require(to == msg.sender || msg.sender == _rankingInstance, \\\"levelUp: Not permitted\\\");\\n        _burn(to, level, _levelUpThreshold);\\n        _mintRank(to, 1, level, data);\\n        emit LevelUp(to, level);\\n    }\\n\\n    function findNewRank(address account, uint256 oldRank) public view returns (uint256) {\\n        for (uint256 i = oldRank; i > 0; i--) {\\n            uint256 _balanceTemp = balanceOf(account, i);\\n            if (_balanceTemp > 0) return i;\\n        }\\n        return 0;\\n    }\\n\\n    event RankUpdated(address indexed account, uint256 indexed rank);\\n\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (rank[to] < ids[i] && amounts[i] != 0) {\\n                rank[to] = ids[i];\\n                emit RankUpdated(to, ids[i]);\\n            }\\n            if (from != address(0) && (rank[from] != findNewRank(from, rank[from]))) {\\n                uint256 newRankFrom = findNewRank(from, rank[from]);\\n                rank[from] = newRankFrom;\\n                emit RankUpdated(from, newRankFrom);\\n            }\\n\\n            super._afterTokenTransfer(operator, from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    //ToDo: Rename in to rankOf(address account)\\n    function getAccountRank(address account) external view returns (uint256) {\\n        return rank[account];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC1155) returns (bool) {\\n        return interfaceId == type(IRankToken).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2a333824a5509334058ab6ac8d92fb32a04436f9e15aca1ea1de60647996f7f5\",\"license\":\"MIT\"},\"src/vendor/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n*  Adapted from\\n*  Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n}\\n\",\"keccak256\":\"0x51004a8dff8260158e191b7de31a8835a32c6cb8d23282903f73a01ce10a2125\",\"license\":\"MIT\"},\"src/vendor/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x4b729c72650a32af6dddb4bb743488bf477770252cf84d5660e78f49164b35b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615450806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80636a994735116100505780636a994735146100945780637fb7f588146100a7578063ceb5beb6146100cd57600080fd5b80630c6446d51461006c578063463bc35514610081575b600080fd5b61007f61007a3660046147e5565b6100f0565b005b61007f61008f366004614912565b6104f2565b61007f6100a23660046149ba565b6108b9565b6100ba6100b5366004614a11565b610b18565b6040519081526020015b60405180910390f35b6100e06100db366004614a3b565b610b73565b60405190151581526020016100c4565b6100fa8433610b9c565b600061010585610c58565b905061011085610c93565b1561017c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f766572000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b61018585610d35565b60008581527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060010154905080600114610234576101c986610de0565b1515600114610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f656e645475726e2d3e63616e456e645475726e4561726c7900000000000000006044820152606401610173565b61023d86610e58565b6102ec5761024a86610edf565b5182600601541480610260575061026086610f1b565b6102ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f536f6d6520706c6179657273207374696c6c20686176652074696d6520746f2060448201527f70726f706f7365000000000000000000000000000000000000000000000000006064820152608401610173565b60006102f787610edf565b90508160011461045857600061030e888887610fbe565b91505060005b825181101561045557600085600201600088848151811061033757610337614a97565b60200260200101518152602001908152602001600020805461035890614ac6565b80601f016020809104026020016040519081016040528092919081815260200182805461038490614ac6565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b50505050509050806040516103e69190614b3d565b6040518091039020858b7f71cc117353a39d910a72175a56496eefb857568810a5f5b11079400201be4dd48487878151811061042457610424614a97565b602002602001015160405161043a929190614ba3565b60405180910390a4508061044d81614bf4565b915050610314565b50505b6000610463886112ab565b91505061049e8860009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090206001015490565b887f69a9400160c8f6e71eb8c0ab9c5824e20304af8146719a7625c9d15675ebb6d384848a8a8d6040516104d6959493929190614d04565b60405180910390a36104e888876113bf565b5050505050505050565b80516104fd90611516565b80516105099033610b9c565b805161051490610c93565b1561057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b805161058690610d35565b60006105958260000151610c58565b8251606084015173ffffffffffffffffffffffffffffffffffffffff1660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020549192501461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f74206120706c6179657200000000000000000000000000000000000000006044820152606401610173565b815161065590610e58565b156106bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e6e6f742070726f706f736520696e206c617374207475726e00000000006044820152606401610173565b81602001515160000361072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e6e6f742070726f706f736520656d7074790000000000000000000000006044820152606401610173565b606082015173ffffffffffffffffffffffffffffffffffffffff166000908152600582016020526040902054156107be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f416c72656164792070726f706f736564210000000000000000000000000000006044820152606401610173565b815160009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060010154604080850151606086015173ffffffffffffffffffffffffffffffffffffffff166000908152600586016020529182205560068401805492935060019290919061083c908490614da4565b90915550506060830151835161085191611590565b50826060015173ffffffffffffffffffffffffffffffffffffffff168184600001517f525b2e06a8f927c08033ec5d6334d7796bbea62d2d4f0486fe60196d4fe6d0ad866040015187602001516040516108ac929190614db7565b60405180910390a4505050565b6108c38333610b9c565b6108cc83611516565b6108d583610d35565b6108de83610c93565b15610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b61094f83826116ab565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902060019081015411610a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4e6f2070726f706f73616c73206578697374206174207475726e20313a20636160448201527f6e6e6f7420766f746500000000000000000000000000000000000000000000006064820152608401610173565b6000610a1a84610c58565b9050600181600a016000828254610a319190614da4565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600c82016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610a908483611590565b5060008481527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090206001015473ffffffffffffffffffffffffffffffffffffffff831690857f70a202954fc6b6d8015f8bcfbc543189e19810d2e7e964e655ab5922d1ac5b4e86604051610b0a9190614dd0565b60405180910390a450505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b600080610b86858051906020012061177f565b9050610b938382866117c7565b95945050505050565b610ba582611516565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090205473ffffffffffffffffffffffffffffffffffffffff828116911614610c54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4f6e6c792067616d65206d6173746572000000000000000000000000000000006044820152606401610173565b5050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260408120600a015481905b9392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f315460018201547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d9291108015610d1c5750600b81015460ff16155b15610d2b575060019392505050565b5060009392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812090829003610d7257610d72614de3565b600481015460ff16610c54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f47616d6520686173206e6f7420796574207374617274656400000000000000006044820152606401610173565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081206000610e1b82600501611842565b826008015414610e2c576000610e2f565b60015b600483015490915060ff16610e48575060009392505050565b8080610d1c5750610d1c8461184c565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f315460018201547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d92919003610d2b575060019392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260409020606090610c8c600582016118af565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d9083600003610f7a57610f7a614de3565b600481015460ff161515600114610f9357610f93614de3565b60028101548254610fa49190614da4565b4211610fb4575060009392505050565b5060019392505050565b6060806000610fcc86610edf565b90506000815167ffffffffffffffff811115610fea57610fea6145ca565b604051908082528060200260200182016040528015611013578160200160208202803683370190505b5090506000825167ffffffffffffffff811115611032576110326145ca565b60405190808252806020026020018201604052801561105b578160200160208202803683370190505b5090506000835167ffffffffffffffff81111561107a5761107a6145ca565b6040519080825280602002602001820160405280156110a3578160200160208202803683370190505b50905060006110b06118bc565b905060006110bd8b610c58565b905060005b86518110156111675781600c0160008883815181106110e3576110e3614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1684828151811061114557611145614a97565b911515602092830291909101909101528061115f81614bf4565b9150506110c2565b50600682015489516040805160608101825260058601548152602081018490526007860154918101919091526111a29290918d9187916118e5565b935060005b86518110156112995786518a82815181106111c4576111c4614a97565b60200260200101511015611287578481815181106111e4576111e4614a97565b602002602001015161121888838151811061120157611201614a97565b60200260200101518e611b8890919063ffffffff16565b6112229190614da4565b86828151811061123457611234614a97565b60200260200101818152505061128787828151811061125557611255614a97565b602002602001015187838151811061126f5761126f614a97565b60200260200101518e611be09092919063ffffffff16565b8061129181614bf4565b9150506111a7565b50939a92995091975050505050505050565b60608060006112b984610edf565b90506000815167ffffffffffffffff8111156112d7576112d76145ca565b604051908082528060200260200182016040528015611300578160200160208202803683370190505b50905060005b82518110156113b4576113858684838151811061132557611325614a97565b602002602001015160009182527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020908152604080842073ffffffffffffffffffffffffffffffffffffffff9390931684526009909201905290205490565b82828151811061139757611397614a97565b6020908102919091010152806113ac81614bf4565b915050611306565b509094909350915050565b6113c882611cab565b60008060006113d685611e66565b509250925092508280156113e75750815b156114185760405185907f16b81a8b7a63ff74301aeb7a5b3048ff92880ec2bb0773136ed953bf4ef6f47390600090a25b821561144a5760405185907f355ab9c54569d91a1467b11b130e91c3f6c15c3c50c7225177cfaf66ba44ddd090600090a25b801561150557600061149d6114937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b879061201561206d565b905060006114aa87610edf565b9050816040516114ba9190614e12565b6040518091039020816040516114d09190614e48565b6040519081900381209089907f310cab2765035ece7f5c89e2f74e216e41485f0911e38063d06de80c47e14b7e90600090a450505b61150f85856121ff565b5050505050565b61151e612287565b6115278161231a565b61158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f2067616d6520666f756e64000000000000000000000000000000000000006044820152606401610173565b50565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081206001015460006115cb6118bc565b905060006115d886610c58565b90506001808481036115ed57600091506115ff565b6115f688610e58565b156115ff575060005b60078401546004840154101561161457600091505b600182801561164b575073ffffffffffffffffffffffffffffffffffffffff88166000908152600c8501602052604090205460ff16155b15611654575060005b818015611686575073ffffffffffffffffffffffffffffffffffffffff88166000908152600585016020526040902054155b1561168f575060005b801561169f5761169f8989612376565b98975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d90831461177a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6973206e6f7420696e207468652067616d6500000000000000000000000000006044820152606401610173565b505050565b6000610b6d61178c6125fb565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006117d685856126d9565b909250905060008160048111156117ef576117ef614e88565b14801561182757508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611838575061183886868661271e565b9695505050505050565b6000610b6d825490565b60008061185883610f1b565b60008481527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902060048101549192509060ff1661189f575060009392505050565b8115610d2b575060019392505050565b60606000610c8c8361287b565b6000807f7acf15cdb85906c3736403f86bf7ccb69a25bb6dbdcde1cbcbf35fe2a64df852610b6d565b606060008267ffffffffffffffff811115611902576119026145ca565b60405190808252806020026020018201604052801561192b578160200160208202803683370190505b5090506000865167ffffffffffffffff81111561194a5761194a6145ca565b604051908082528060200260200182016040528015611973578160200160208202803683370190505b50905060005b84811015611b7b57600083828151811061199557611995614a97565b60200260200101818152505060005b8851811015611b685760008982815181106119c1576119c1614a97565b602002602001015190508882815181106119dd576119dd614a97565b6020026020010151611a3a57878584815181106119fc576119fc614a97565b60200260200101818151611a109190614da4565b9052508a518451859084908110611a2957611a29614a97565b602002602001018181525050611b55565b808381518110611a4c57611a4c614a97565b6020026020010151858481518110611a6657611a66614a97565b60200260200101818151611a7a9190614da4565b9052508051600290829085908110611a9457611a94614a97565b6020026020010151611aa69190614fd7565b848381518110611ab857611ab8614a97565b60200260200101818151611acc9190614da4565b9052508a518451859084908110611ae557611ae5614a97565b60200260200101511115611b55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f717561647261746963566f74696e674572726f720000000000000000000000006044820152606401610173565b5080611b6081614bf4565b9150506119a4565b5080611b7381614bf4565b915050611979565b5090979650505050505050565b60009182527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020908152604080842073ffffffffffffffffffffffffffffffffffffffff9390931684526009909201905290205490565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260409020611c1784846128d7565b611c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f706c61796572206e6f7420696e20612067616d650000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600990920160205260409091205550565b6000611cb682610edf565b90506000611cc383610c58565b6000600682018190559091505b8251811015611e3f576000801b826005016000858481518110611cf557611cf5614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051806020016040528060008152508260020160008381526020019081526020016000209081611d6c919061502c565b50600082600c016000858481518110611d8757611d87614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000801b826007016000858481518110611dfc57611dfc614a97565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205580611e3781614bf4565b915050611cd0565b50600a81018054600b83015560009081905560038201805460049093019290925590555050565b600080600060606000611ea38660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902090565b9050611eae86610d35565b611eb786612956565b611ec0816129c6565b6001816001016000828254611ed59190614da4565b90915550504260028201556000611eeb87610e58565b600b83015490915060ff166000611f0189610edf565b5167ffffffffffffffff811115611f1a57611f1a6145ca565b604051908082528060200260200182016040528015611f43578160200160208202803683370190505b5090508280611f565750600b84015460ff165b80611f655750611f6589610c93565b15611fa757611f7389612a55565b600b860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683151517905590925090505b8051611fbc90600c8601906020840190614534565b50611fc689610c93565b60049490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010095151586021790819055929991985060ff939092049290921695509350915050565b600061202083610c58565b600181015490915061177a90849073ffffffffffffffffffffffffffffffffffffffff1661204d82612b4e565b60008151811061205f5761205f614a97565b602002602001015185612bee565b606061207884611516565b61208a8461208586612b4e565b612c51565b6000612095856112ab565b91505060006120a386610edf565b905060005b815181101561210d576120d4878383815181106120c7576120c7614a97565b6020026020010151612cf5565b6120fb878383815181106120ea576120ea614a97565b60200260200101518763ffffffff16565b8061210581614bf4565b9150506120a8565b5060006121186118bc565b600181015481548451600284015493945073ffffffffffffffffffffffffffffffffffffffff9092169263a9059cbb928a92916121559190615146565b61215f9190614da4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f3919061515d565b50919695505050505050565b600061220a83610c58565b905060005b82518110156122815782818151811061222a5761222a614a97565b60200260200101518260020160008381526020019081526020016000209081612253919061502c565b5060018260030160008282546122699190614da4565b9091555081905061227981614bf4565b91505061220f565b50505050565b60006122916118bc565b600481015490915074010000000000000000000000000000000000000000900460ff1661158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c79496e697469616c697a656400000000000000000000000000000000006044820152606401610173565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260408120805473ffffffffffffffffffffffffffffffffffffffff161561236d5750600192915050565b50600092915050565b8161238081610f1b565b156123e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6f6e6c79496e5475726e54696d65202d3e207475726e2074696d65646f7574006044820152606401610173565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902061241d84610d35565b61242684612956565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260078201602052604090205460ff16156124b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f616c7265616479206d6164652061206d6f7665000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d908514612587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6973206e6f7420696e207468652067616d6500000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600783016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600884018054919290916125ef908490614da4565b90915550505050505050565b7fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a9546000907fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a79073ffffffffffffffffffffffffffffffffffffffff16301480156126695750806001015446145b156126745754919050565b6126cf8160050154826003015483600401546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b91505090565b5090565b600080825160410361270f5760208301516040840151606085015160001a61270387828585612dbc565b94509450505050612717565b506000905060025b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8686604051602401612755929190614db7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516127de9190614b3d565b600060405180830381855afa9150503d8060008114612819576040519150601f19603f3d011682016040523d82523d6000602084013e61281e565b606091505b509150915081801561283257506020815110155b8015611838575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090612870908301602090810190840161517f565b149695505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156128cb57602002820191906000526020600020905b8154815260200190600101908083116128b7575b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260408120547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d90841461294b57600061294e565b60015b949350505050565b61295f81610c93565b1561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b60005b6129d582600501611842565b811015612a4a5760006129eb6005840183612eab565b73ffffffffffffffffffffffffffffffffffffffff166000908152600784016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612a4281614bf4565b9150506129c9565b506000600890910155565b600060607f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d8280612a85866112ab565b91509150612aa281600060018451612a9d9190615198565b612eb7565b60005b60018351612ab39190615198565b811015612b3f576005840154612acb90600190615198565b8111612b285781612add826001614da4565b81518110612aed57612aed614a97565b6020026020010151828281518110612b0757612b07614a97565b602002602001015103612b235750600196919550909350505050565b612b2d565b612b3f565b80612b3781614bf4565b915050612aa5565b50600096919550909350505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060609190600c8101805460408051602080840282018101909252828152939450830182828015612be157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612bb6575b5050505050915050919050565b6000612c438560408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b905061150f81858585613037565b6000612c5c83610c58565b90506000612c686118bc565b6004810154909150612c93908590859073ffffffffffffffffffffffffffffffffffffffff166130e6565b60005b600883015481101561150f57612ce38585856008018481548110612cbc57612cbc614a97565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166130e6565b80612ced81614bf4565b915050612c96565b612cfe82611516565b612d0882826133a6565b6000612d126118bc565b90506000612d1f84610c58565b90506001816000015411156122815780546004830154612d5691859173ffffffffffffffffffffffffffffffffffffffff166135b2565b60005b600882015481101561150f57612daa848360000154846008018481548110612d8357612d83614a97565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166135b2565b80612db481614bf4565b915050612d59565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612df35750600090506003612ea2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612e47573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612e9b57600060019250925050612ea2565b9150600090505b94509492505050565b6000610c8c8383613640565b8181808203612ec7575050505050565b6000856002612ed687876151ab565b612ee091906151cb565b612eea908761525a565b81518110612efa57612efa614a97565b602002602001015190505b818313613009575b80868481518110612f2057612f20614a97565b60200260200101511115612f405782612f3881615282565b935050612f0d565b858281518110612f5257612f52614a97565b6020026020010151811115612f735781612f6b816152b3565b925050612f40565b81831361300457858281518110612f8c57612f8c614a97565b6020026020010151868481518110612fa657612fa6614a97565b6020026020010151878581518110612fc057612fc0614a97565b60200260200101888581518110612fd957612fd9614a97565b60209081029190910101919091525282612ff281615282565b9350508180613000906152b3565b9250505b612f05565b8185121561301c5761301c868684612eb7565b8383121561302f5761302f868486612eb7565b505050505050565b8360080154846007015485600601546130509190614da4565b106130b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f7420656e6f7567682062616c616e636520746f2072656c656173650000006044820152606401610173565b6130c68430858560008661366a565b60018460070160008282546130db9190614da4565b909155505050505050565b60006130f184610c58565b905060008290508073ffffffffffffffffffffffffffffffffffffffff1663f242432a308660008151811061312857613128614a97565b6020026020010151856000015460016131419190614da4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526001606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f242432a308660018151811061321257613212614a97565b602090810291909101015185546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526002606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156132a857600080fd5b505af11580156132bc573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f242432a30866002815181106132f0576132f0614a97565b602090810291909101015185546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526001606482015260a06084820152600060a482015260c4015b600060405180830381600087803b15801561338757600080fd5b505af115801561339b573d6000803e3d6000fd5b505050505050505050565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d906133fe8461231a565b613464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f67616d6520646f6573206e6f74206578697374000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098301602052604090205484146134f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420696e207468652067616d6500000000000000000000000000000000006044820152606401610173565b600481015460ff1615806135175750600481015460ff6101009091041615156001145b61357d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43616e6e6f74206c65617665206f6e63652073746172746564000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098301602052604081205561150f6005820184613a17565b6040517fb5674c6800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490526001604483015282919082169063b5674c6890606401600060405180830381600087803b15801561362c57600080fd5b505af11580156104e8573d6000803e3d6000fd5b600082600001828154811061365757613657614a97565b9060005260206000200154905092915050565b3073ffffffffffffffffffffffffffffffffffffffff8616036137d4576002860154156136d957600286015460405173ffffffffffffffffffffffffffffffffffffffff83169180156108fc02916000818181858888f193505050501580156136d7573d6000803e3d6000fd5b505b60048601541561372b57600486015460405173ffffffffffffffffffffffffffffffffffffffff86169180156108fc02916000818181858888f19350505050158015613729573d6000803e3d6000fd5b505b60058601541561377d57600586015460405173ffffffffffffffffffffffffffffffffffffffff85169180156108fc02916000818181858888f1935050505015801561377b573d6000803e3d6000fd5b505b6003860154156137cf57600386015460405173ffffffffffffffffffffffffffffffffffffffff84169180156108fc02916000818181858888f193505050501580156137cd573d6000803e3d6000fd5b505b613878565b600386015460058701546004880154600289015460009392916137f691614da4565b6138009190614da4565b61380a9190614da4565b905080341015613876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d73672e76616c756520746f6f206c6f770000000000000000000000000000006044820152606401610173565b505b60005b600a870154811015613a0e57600087600a01828154811061389e5761389e614a97565b6000918252602082200154600b8a01805473ffffffffffffffffffffffffffffffffffffffff909216935090849081106138da576138da614a97565b9060005260206000200154905060008960090184815481106138fe576138fe614a97565b60009182526020808320908204015460ff601f9092166101000a90041691508a8183600281111561393157613931614e88565b600281111561394257613942614e88565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8816825283528181208682529092528120915082600281111561399157613991614e88565b036139aa576139a584828c8c8c8c8c613a39565b6139f7565b60028260028111156139be576139be614e88565b036139ce576139a584828c613bb1565b60018260028111156139e2576139e2614e88565b036139f7576139f78484838d8d8d8d8d613d7c565b505050508080613a0690614bf4565b91505061387b565b50505050505050565b6000610c8c8373ffffffffffffffffffffffffffffffffffffffff8416614163565b613a4c878683896002016001015461425d565b613a5f878684896004016001015461425d565b613a72878686896006016001015461425d565b613a85878685896008016001015461425d565b600186015487908015801590613ab1575073ffffffffffffffffffffffffffffffffffffffff87163014155b1561339b576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528291908416906370a0823190602401602060405180830381865afa158015613b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b49919061517f565b101561339b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420656e6f75676820657263323020746f6b656e730000000000000000006044820152606401610173565b60038201548390158015613bc757506005830154155b8015613bd557506007830154155b8015613be357506009830154155b613c49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f455243373231207472616e7366657273206e6f7420737570706f7274656400006044820152606401610173565b600183015415801590613c72575073ffffffffffffffffffffffffffffffffffffffff82163014155b15612281576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600091908316906370a0823190602401602060405180830381865afa158015613ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0b919061517f565b600185015490915081101561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f7420656e6f756768204552433732312062616c616e6365000000000000006044820152606401610173565b600186015488908015613e90576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018b90526000919084169062fdd58e90604401602060405180830381865afa158015613dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e22919061517f565b905081811015613e8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f455243313135352062616c616e6365206973206e6f742076616c6964000000006044820152606401610173565b505b5060078701548015613f16578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88888c858d6006016000016040518663ffffffff1660e01b8152600401613ee395949392919061530a565b600060405180830381600087803b158015613efd57600080fd5b505af1158015613f11573d6000803e3d6000fd5b505050505b5060098701548015613f9c578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88878c858d6008016000016040518663ffffffff1660e01b8152600401613f6995949392919061530a565b600060405180830381600087803b158015613f8357600080fd5b505af1158015613f97573d6000803e3d6000fd5b505050505b50600587015480156140d15773ffffffffffffffffffffffffffffffffffffffff8416614057576040517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018b90526044820183905283169063f5298aca90606401600060405180830381600087803b15801561403a57600080fd5b505af115801561404e573d6000803e3d6000fd5b505050506140d1565b8173ffffffffffffffffffffffffffffffffffffffff1663f242432a88868c858d6004016000016040518663ffffffff1660e01b815260040161409e95949392919061530a565b600060405180830381600087803b1580156140b857600080fd5b505af11580156140cc573d6000803e3d6000fd5b505050505b5060038701548015614157578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88858c858d6002016000016040518663ffffffff1660e01b815260040161412495949392919061530a565b600060405180830381600087803b15801561413e57600080fd5b505af1158015614152573d6000803e3d6000fd5b505050505b50505050505050505050565b6000818152600183016020526040812054801561424c576000614187600183615198565b855490915060009061419b90600190615198565b90508181146142005760008660000182815481106141bb576141bb614a97565b90600052602060002001549050808760000184815481106141de576141de614a97565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614211576142116153eb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b6d565b6000915050610b6d565b5092915050565b83811561150f573073ffffffffffffffffffffffffffffffffffffffff8516036143c25773ffffffffffffffffffffffffffffffffffffffff83161561433d576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282169063a9059cbb906044015b6020604051808303816000875af1158015614313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614337919061515d565b5061150f565b6040517f42966c680000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216906342966c6890602401600060405180830381600087803b1580156143a557600080fd5b505af11580156143b9573d6000803e3d6000fd5b5050505061150f565b73ffffffffffffffffffffffffffffffffffffffff831615614441576040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490528216906323b872dd906064016142f4565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152604482018490528216906323b872dd906064016020604051808303816000875af11580156144bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144e0919061515d565b506040517f42966c680000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216906342966c689060240161336d565b8280548282559060005260206000209081019282156145ae579160200282015b828111156145ae57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614554565b506126d59291505b808211156126d557600081556001016145b6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614640576146406145ca565b604052919050565b600067ffffffffffffffff821115614662576146626145ca565b5060051b60200190565b600082601f83011261467d57600080fd5b8135602061469261468d83614648565b6145f9565b82815260059290921b840181019181810190868411156146b157600080fd5b8286015b848110156146cc57803583529183019183016146b5565b509695505050505050565b600082601f8301126146e857600080fd5b813567ffffffffffffffff811115614702576147026145ca565b61473360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016145f9565b81815284602083860101111561474857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261477657600080fd5b8135602061478661468d83614648565b82815260059290921b840181019181810190868411156147a557600080fd5b8286015b848110156146cc57803567ffffffffffffffff8111156147c95760008081fd5b6147d78986838b01016146d7565b8452509183019183016147a9565b600080600080608085870312156147fb57600080fd5b8435935060208086013567ffffffffffffffff8082111561481b57600080fd5b818801915088601f83011261482f57600080fd5b813561483d61468d82614648565b81815260059190911b8301840190848101908b83111561485c57600080fd5b8585015b83811015614894578035858111156148785760008081fd5b6148868e89838a010161466c565b845250918601918601614860565b509750505060408801359250808311156148ad57600080fd5b6148b989848a01614765565b945060608801359250808311156148cf57600080fd5b50506148dd8782880161466c565b91505092959194509250565b803573ffffffffffffffffffffffffffffffffffffffff8116811461490d57600080fd5b919050565b60006020828403121561492457600080fd5b813567ffffffffffffffff8082111561493c57600080fd5b908301906080828603121561495057600080fd5b60405160808101818110838211171561496b5761496b6145ca565b6040528235815260208301358281111561498457600080fd5b614990878286016146d7565b602083015250604083013560408201526149ac606084016148e9565b606082015295945050505050565b6000806000606084860312156149cf57600080fd5b83359250602084013567ffffffffffffffff8111156149ed57600080fd5b6149f9868287016146d7565b925050614a08604085016148e9565b90509250925092565b60008060408385031215614a2457600080fd5b614a2d836148e9565b946020939093013593505050565b600080600060608486031215614a5057600080fd5b833567ffffffffffffffff80821115614a6857600080fd5b614a74878388016146d7565b94506020860135915080821115614a8a57600080fd5b506149f9868287016146d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680614ada57607f821691505b602082108103614b13577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60005b83811015614b34578181015183820152602001614b1c565b50506000910152565b60008251614b4f818460208701614b19565b9190910192915050565b60008151808452614b71816020860160208601614b19565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000614bb66040830185614b59565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2557614c25614bc5565b5060010190565b600081518084526020808501945080840160005b83811015614c5c57815187529582019590820190600101614c40565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614caf578284038952614c9d848351614b59565b98850198935090840190600101614c85565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614caf578284038952614cf2848351614c2c565b98850198935090840190600101614cda565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614d5357815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614d21565b50505083810382850152614d678189614c2c565b9150508281036040840152614d7c8187614c67565b90508281036060840152614d908186614c2c565b9050828103608084015261169f8185614cbc565b80820180821115610b6d57610b6d614bc5565b82815260406020820152600061294e6040830184614b59565b602081526000610c8c6020830184614b59565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b815160009082906020808601845b83811015614e3c57815185529382019390820190600101614e20565b50929695505050505050565b815160009082906020808601845b83811015614e3c57815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101614e56565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181815b80851115614f1057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614ef657614ef6614bc5565b80851615614f0357918102915b93841c9390800290614ebc565b509250929050565b600082614f2757506001610b6d565b81614f3457506000610b6d565b8160018114614f4a5760028114614f5457614f70565b6001915050610b6d565b60ff841115614f6557614f65614bc5565b50506001821b610b6d565b5060208310610133831016604e8410600b8410161715614f93575081810a610b6d565b614f9d8383614eb7565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614fcf57614fcf614bc5565b029392505050565b6000610c8c60ff841683614f18565b601f82111561177a57600081815260208120601f850160051c8101602086101561500d5750805b601f850160051c820191505b8181101561302f57828155600101615019565b815167ffffffffffffffff811115615046576150466145ca565b61505a816150548454614ac6565b84614fe6565b602080601f8311600181146150ad57600084156150775750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561302f565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156150fa578886015182559484019460019091019084016150db565b508582101561513657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610b6d57610b6d614bc5565b60006020828403121561516f57600080fd5b81518015158114610c8c57600080fd5b60006020828403121561519157600080fd5b5051919050565b81810381811115610b6d57610b6d614bc5565b818103600083128015838313168383128216171561425657614256614bc5565b600082615201577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561525557615255614bc5565b500590565b808201828112600083128015821682158216171561527a5761527a614bc5565b505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2557614c25614bc5565b60007f800000000000000000000000000000000000000000000000000000000000000082036152e4576152e4614bc5565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600073ffffffffffffffffffffffffffffffffffffffff808816835260208188168185015286604085015285606085015260a0608085015260009150845461535181614ac6565b8060a087015260c060018084166000811461537357600181146153ab576153d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010196506153d9565b896000528560002060005b858110156153d15781548b82018601529083019087016153b6565b8a0184019750505b50949c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220a390fcac072076adaa40df2fa22639edd8936c95fa97bf222f09bc27ebf7b5f064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80636a994735116100505780636a994735146100945780637fb7f588146100a7578063ceb5beb6146100cd57600080fd5b80630c6446d51461006c578063463bc35514610081575b600080fd5b61007f61007a3660046147e5565b6100f0565b005b61007f61008f366004614912565b6104f2565b61007f6100a23660046149ba565b6108b9565b6100ba6100b5366004614a11565b610b18565b6040519081526020015b60405180910390f35b6100e06100db366004614a3b565b610b73565b60405190151581526020016100c4565b6100fa8433610b9c565b600061010585610c58565b905061011085610c93565b1561017c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f766572000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b61018585610d35565b60008581527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060010154905080600114610234576101c986610de0565b1515600114610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f656e645475726e2d3e63616e456e645475726e4561726c7900000000000000006044820152606401610173565b61023d86610e58565b6102ec5761024a86610edf565b5182600601541480610260575061026086610f1b565b6102ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f536f6d6520706c6179657273207374696c6c20686176652074696d6520746f2060448201527f70726f706f7365000000000000000000000000000000000000000000000000006064820152608401610173565b60006102f787610edf565b90508160011461045857600061030e888887610fbe565b91505060005b825181101561045557600085600201600088848151811061033757610337614a97565b60200260200101518152602001908152602001600020805461035890614ac6565b80601f016020809104026020016040519081016040528092919081815260200182805461038490614ac6565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b50505050509050806040516103e69190614b3d565b6040518091039020858b7f71cc117353a39d910a72175a56496eefb857568810a5f5b11079400201be4dd48487878151811061042457610424614a97565b602002602001015160405161043a929190614ba3565b60405180910390a4508061044d81614bf4565b915050610314565b50505b6000610463886112ab565b91505061049e8860009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090206001015490565b887f69a9400160c8f6e71eb8c0ab9c5824e20304af8146719a7625c9d15675ebb6d384848a8a8d6040516104d6959493929190614d04565b60405180910390a36104e888876113bf565b5050505050505050565b80516104fd90611516565b80516105099033610b9c565b805161051490610c93565b1561057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b805161058690610d35565b60006105958260000151610c58565b8251606084015173ffffffffffffffffffffffffffffffffffffffff1660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020549192501461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f74206120706c6179657200000000000000000000000000000000000000006044820152606401610173565b815161065590610e58565b156106bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e6e6f742070726f706f736520696e206c617374207475726e00000000006044820152606401610173565b81602001515160000361072b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43616e6e6f742070726f706f736520656d7074790000000000000000000000006044820152606401610173565b606082015173ffffffffffffffffffffffffffffffffffffffff166000908152600582016020526040902054156107be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f416c72656164792070726f706f736564210000000000000000000000000000006044820152606401610173565b815160009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060010154604080850151606086015173ffffffffffffffffffffffffffffffffffffffff166000908152600586016020529182205560068401805492935060019290919061083c908490614da4565b90915550506060830151835161085191611590565b50826060015173ffffffffffffffffffffffffffffffffffffffff168184600001517f525b2e06a8f927c08033ec5d6334d7796bbea62d2d4f0486fe60196d4fe6d0ad866040015187602001516040516108ac929190614db7565b60405180910390a4505050565b6108c38333610b9c565b6108cc83611516565b6108d583610d35565b6108de83610c93565b15610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b61094f83826116ab565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902060019081015411610a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4e6f2070726f706f73616c73206578697374206174207475726e20313a20636160448201527f6e6e6f7420766f746500000000000000000000000000000000000000000000006064820152608401610173565b6000610a1a84610c58565b9050600181600a016000828254610a319190614da4565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600c82016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610a908483611590565b5060008481527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090206001015473ffffffffffffffffffffffffffffffffffffffff831690857f70a202954fc6b6d8015f8bcfbc543189e19810d2e7e964e655ab5922d1ac5b4e86604051610b0a9190614dd0565b60405180910390a450505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152603481018290526000906054016040516020818303038152906040528051906020012090505b92915050565b600080610b86858051906020012061177f565b9050610b938382866117c7565b95945050505050565b610ba582611516565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090205473ffffffffffffffffffffffffffffffffffffffff828116911614610c54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4f6e6c792067616d65206d6173746572000000000000000000000000000000006044820152606401610173565b5050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260408120600a015481905b9392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f315460018201547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d9291108015610d1c5750600b81015460ff16155b15610d2b575060019392505050565b5060009392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812090829003610d7257610d72614de3565b600481015460ff16610c54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f47616d6520686173206e6f7420796574207374617274656400000000000000006044820152606401610173565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081206000610e1b82600501611842565b826008015414610e2c576000610e2f565b60015b600483015490915060ff16610e48575060009392505050565b8080610d1c5750610d1c8461184c565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f315460018201547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d92919003610d2b575060019392505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260409020606090610c8c600582016118af565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d9083600003610f7a57610f7a614de3565b600481015460ff161515600114610f9357610f93614de3565b60028101548254610fa49190614da4565b4211610fb4575060009392505050565b5060019392505050565b6060806000610fcc86610edf565b90506000815167ffffffffffffffff811115610fea57610fea6145ca565b604051908082528060200260200182016040528015611013578160200160208202803683370190505b5090506000825167ffffffffffffffff811115611032576110326145ca565b60405190808252806020026020018201604052801561105b578160200160208202803683370190505b5090506000835167ffffffffffffffff81111561107a5761107a6145ca565b6040519080825280602002602001820160405280156110a3578160200160208202803683370190505b50905060006110b06118bc565b905060006110bd8b610c58565b905060005b86518110156111675781600c0160008883815181106110e3576110e3614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1684828151811061114557611145614a97565b911515602092830291909101909101528061115f81614bf4565b9150506110c2565b50600682015489516040805160608101825260058601548152602081018490526007860154918101919091526111a29290918d9187916118e5565b935060005b86518110156112995786518a82815181106111c4576111c4614a97565b60200260200101511015611287578481815181106111e4576111e4614a97565b602002602001015161121888838151811061120157611201614a97565b60200260200101518e611b8890919063ffffffff16565b6112229190614da4565b86828151811061123457611234614a97565b60200260200101818152505061128787828151811061125557611255614a97565b602002602001015187838151811061126f5761126f614a97565b60200260200101518e611be09092919063ffffffff16565b8061129181614bf4565b9150506111a7565b50939a92995091975050505050505050565b60608060006112b984610edf565b90506000815167ffffffffffffffff8111156112d7576112d76145ca565b604051908082528060200260200182016040528015611300578160200160208202803683370190505b50905060005b82518110156113b4576113858684838151811061132557611325614a97565b602002602001015160009182527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020908152604080842073ffffffffffffffffffffffffffffffffffffffff9390931684526009909201905290205490565b82828151811061139757611397614a97565b6020908102919091010152806113ac81614bf4565b915050611306565b509094909350915050565b6113c882611cab565b60008060006113d685611e66565b509250925092508280156113e75750815b156114185760405185907f16b81a8b7a63ff74301aeb7a5b3048ff92880ec2bb0773136ed953bf4ef6f47390600090a25b821561144a5760405185907f355ab9c54569d91a1467b11b130e91c3f6c15c3c50c7225177cfaf66ba44ddd090600090a25b801561150557600061149d6114937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b879061201561206d565b905060006114aa87610edf565b9050816040516114ba9190614e12565b6040518091039020816040516114d09190614e48565b6040519081900381209089907f310cab2765035ece7f5c89e2f74e216e41485f0911e38063d06de80c47e14b7e90600090a450505b61150f85856121ff565b5050505050565b61151e612287565b6115278161231a565b61158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f2067616d6520666f756e64000000000000000000000000000000000000006044820152606401610173565b50565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604081206001015460006115cb6118bc565b905060006115d886610c58565b90506001808481036115ed57600091506115ff565b6115f688610e58565b156115ff575060005b60078401546004840154101561161457600091505b600182801561164b575073ffffffffffffffffffffffffffffffffffffffff88166000908152600c8501602052604090205460ff16155b15611654575060005b818015611686575073ffffffffffffffffffffffffffffffffffffffff88166000908152600585016020526040902054155b1561168f575060005b801561169f5761169f8989612376565b98975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d90831461177a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6973206e6f7420696e207468652067616d6500000000000000000000000000006044820152606401610173565b505050565b6000610b6d61178c6125fb565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006117d685856126d9565b909250905060008160048111156117ef576117ef614e88565b14801561182757508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80611838575061183886868661271e565b9695505050505050565b6000610b6d825490565b60008061185883610f1b565b60008481527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902060048101549192509060ff1661189f575060009392505050565b8115610d2b575060019392505050565b60606000610c8c8361287b565b6000807f7acf15cdb85906c3736403f86bf7ccb69a25bb6dbdcde1cbcbf35fe2a64df852610b6d565b606060008267ffffffffffffffff811115611902576119026145ca565b60405190808252806020026020018201604052801561192b578160200160208202803683370190505b5090506000865167ffffffffffffffff81111561194a5761194a6145ca565b604051908082528060200260200182016040528015611973578160200160208202803683370190505b50905060005b84811015611b7b57600083828151811061199557611995614a97565b60200260200101818152505060005b8851811015611b685760008982815181106119c1576119c1614a97565b602002602001015190508882815181106119dd576119dd614a97565b6020026020010151611a3a57878584815181106119fc576119fc614a97565b60200260200101818151611a109190614da4565b9052508a518451859084908110611a2957611a29614a97565b602002602001018181525050611b55565b808381518110611a4c57611a4c614a97565b6020026020010151858481518110611a6657611a66614a97565b60200260200101818151611a7a9190614da4565b9052508051600290829085908110611a9457611a94614a97565b6020026020010151611aa69190614fd7565b848381518110611ab857611ab8614a97565b60200260200101818151611acc9190614da4565b9052508a518451859084908110611ae557611ae5614a97565b60200260200101511115611b55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f717561647261746963566f74696e674572726f720000000000000000000000006044820152606401610173565b5080611b6081614bf4565b9150506119a4565b5080611b7381614bf4565b915050611979565b5090979650505050505050565b60009182527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020908152604080842073ffffffffffffffffffffffffffffffffffffffff9390931684526009909201905290205490565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260409020611c1784846128d7565b611c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f706c61796572206e6f7420696e20612067616d650000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600990920160205260409091205550565b6000611cb682610edf565b90506000611cc383610c58565b6000600682018190559091505b8251811015611e3f576000801b826005016000858481518110611cf557611cf5614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051806020016040528060008152508260020160008381526020019081526020016000209081611d6c919061502c565b50600082600c016000858481518110611d8757611d87614a97565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000801b826007016000858481518110611dfc57611dfc614a97565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205580611e3781614bf4565b915050611cd0565b50600a81018054600b83015560009081905560038201805460049093019290925590555050565b600080600060606000611ea38660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902090565b9050611eae86610d35565b611eb786612956565b611ec0816129c6565b6001816001016000828254611ed59190614da4565b90915550504260028201556000611eeb87610e58565b600b83015490915060ff166000611f0189610edf565b5167ffffffffffffffff811115611f1a57611f1a6145ca565b604051908082528060200260200182016040528015611f43578160200160208202803683370190505b5090508280611f565750600b84015460ff165b80611f655750611f6589610c93565b15611fa757611f7389612a55565b600b860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001683151517905590925090505b8051611fbc90600c8601906020840190614534565b50611fc689610c93565b60049490940180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010095151586021790819055929991985060ff939092049290921695509350915050565b600061202083610c58565b600181015490915061177a90849073ffffffffffffffffffffffffffffffffffffffff1661204d82612b4e565b60008151811061205f5761205f614a97565b602002602001015185612bee565b606061207884611516565b61208a8461208586612b4e565b612c51565b6000612095856112ab565b91505060006120a386610edf565b905060005b815181101561210d576120d4878383815181106120c7576120c7614a97565b6020026020010151612cf5565b6120fb878383815181106120ea576120ea614a97565b60200260200101518763ffffffff16565b8061210581614bf4565b9150506120a8565b5060006121186118bc565b600181015481548451600284015493945073ffffffffffffffffffffffffffffffffffffffff9092169263a9059cbb928a92916121559190615146565b61215f9190614da4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af11580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f3919061515d565b50919695505050505050565b600061220a83610c58565b905060005b82518110156122815782818151811061222a5761222a614a97565b60200260200101518260020160008381526020019081526020016000209081612253919061502c565b5060018260030160008282546122699190614da4565b9091555081905061227981614bf4565b91505061220f565b50505050565b60006122916118bc565b600481015490915074010000000000000000000000000000000000000000900460ff1661158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f6e6c79496e697469616c697a656400000000000000000000000000000000006044820152606401610173565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3560205260408120805473ffffffffffffffffffffffffffffffffffffffff161561236d5750600192915050565b50600092915050565b8161238081610f1b565b156123e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6f6e6c79496e5475726e54696d65202d3e207475726e2074696d65646f7574006044820152606401610173565b60008381527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040902061241d84610d35565b61242684612956565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260078201602052604090205460ff16156124b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f616c7265616479206d6164652061206d6f7665000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260409020547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d908514612587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6973206e6f7420696e207468652067616d6500000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600783016020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600884018054919290916125ef908490614da4565b90915550505050505050565b7fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a9546000907fe5b6a7afa77789577f2802f0da58895f660e5798c5c11b2ea18b0a53bd65d3a79073ffffffffffffffffffffffffffffffffffffffff16301480156126695750806001015446145b156126745754919050565b6126cf8160050154826003015483600401546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b91505090565b5090565b600080825160410361270f5760208301516040840151606085015160001a61270387828585612dbc565b94509450505050612717565b506000905060025b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8686604051602401612755929190614db7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516127de9190614b3d565b600060405180830381855afa9150503d8060008114612819576040519150601f19603f3d011682016040523d82523d6000602084013e61281e565b606091505b509150915081801561283257506020815110155b8015611838575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090612870908301602090810190840161517f565b149695505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156128cb57602002820191906000526020600020905b8154815260200190600101908083116128b7575b50505050509050919050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f3660205260408120547f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d90841461294b57600061294e565b60015b949350505050565b61295f81610c93565b1561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f47616d65206f76657200000000000000000000000000000000000000000000006044820152606401610173565b60005b6129d582600501611842565b811015612a4a5760006129eb6005840183612eab565b73ffffffffffffffffffffffffffffffffffffffff166000908152600784016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612a4281614bf4565b9150506129c9565b506000600890910155565b600060607f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d8280612a85866112ab565b91509150612aa281600060018451612a9d9190615198565b612eb7565b60005b60018351612ab39190615198565b811015612b3f576005840154612acb90600190615198565b8111612b285781612add826001614da4565b81518110612aed57612aed614a97565b6020026020010151828281518110612b0757612b07614a97565b602002602001015103612b235750600196919550909350505050565b612b2d565b612b3f565b80612b3781614bf4565b915050612aa5565b50600096919550909350505050565b60008181527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f356020526040812060609190600c8101805460408051602080840282018101909252828152939450830182828015612be157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612bb6575b5050505050915050919050565b6000612c438560408051602080820193909352815180820384018152908201825280519083012060009081527fb12a0409539e5fa777ebbd0648c2d35d1b56f5385885518278a66364324a9138909252902090565b905061150f81858585613037565b6000612c5c83610c58565b90506000612c686118bc565b6004810154909150612c93908590859073ffffffffffffffffffffffffffffffffffffffff166130e6565b60005b600883015481101561150f57612ce38585856008018481548110612cbc57612cbc614a97565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166130e6565b80612ced81614bf4565b915050612c96565b612cfe82611516565b612d0882826133a6565b6000612d126118bc565b90506000612d1f84610c58565b90506001816000015411156122815780546004830154612d5691859173ffffffffffffffffffffffffffffffffffffffff166135b2565b60005b600882015481101561150f57612daa848360000154846008018481548110612d8357612d83614a97565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff166135b2565b80612db481614bf4565b915050612d59565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612df35750600090506003612ea2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612e47573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116612e9b57600060019250925050612ea2565b9150600090505b94509492505050565b6000610c8c8383613640565b8181808203612ec7575050505050565b6000856002612ed687876151ab565b612ee091906151cb565b612eea908761525a565b81518110612efa57612efa614a97565b602002602001015190505b818313613009575b80868481518110612f2057612f20614a97565b60200260200101511115612f405782612f3881615282565b935050612f0d565b858281518110612f5257612f52614a97565b6020026020010151811115612f735781612f6b816152b3565b925050612f40565b81831361300457858281518110612f8c57612f8c614a97565b6020026020010151868481518110612fa657612fa6614a97565b6020026020010151878581518110612fc057612fc0614a97565b60200260200101888581518110612fd957612fd9614a97565b60209081029190910101919091525282612ff281615282565b9350508180613000906152b3565b9250505b612f05565b8185121561301c5761301c868684612eb7565b8383121561302f5761302f868486612eb7565b505050505050565b8360080154846007015485600601546130509190614da4565b106130b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f7420656e6f7567682062616c616e636520746f2072656c656173650000006044820152606401610173565b6130c68430858560008661366a565b60018460070160008282546130db9190614da4565b909155505050505050565b60006130f184610c58565b905060008290508073ffffffffffffffffffffffffffffffffffffffff1663f242432a308660008151811061312857613128614a97565b6020026020010151856000015460016131419190614da4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526001606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156131ca57600080fd5b505af11580156131de573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f242432a308660018151811061321257613212614a97565b602090810291909101015185546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526002606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156132a857600080fd5b505af11580156132bc573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f242432a30866002815181106132f0576132f0614a97565b602090810291909101015185546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526001606482015260a06084820152600060a482015260c4015b600060405180830381600087803b15801561338757600080fd5b505af115801561339b573d6000803e3d6000fd5b505050505050505050565b60008281527f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f35602052604090207f91591bea3fc8863c74b4740fa2dfd9fd428a1e509b60555e4d1e8d8028901f2d906133fe8461231a565b613464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f67616d6520646f6573206e6f74206578697374000000000000000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098301602052604090205484146134f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420696e207468652067616d6500000000000000000000000000000000006044820152606401610173565b600481015460ff1615806135175750600481015460ff6101009091041615156001145b61357d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43616e6e6f74206c65617665206f6e63652073746172746564000000000000006044820152606401610173565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260098301602052604081205561150f6005820184613a17565b6040517fb5674c6800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490526001604483015282919082169063b5674c6890606401600060405180830381600087803b15801561362c57600080fd5b505af11580156104e8573d6000803e3d6000fd5b600082600001828154811061365757613657614a97565b9060005260206000200154905092915050565b3073ffffffffffffffffffffffffffffffffffffffff8616036137d4576002860154156136d957600286015460405173ffffffffffffffffffffffffffffffffffffffff83169180156108fc02916000818181858888f193505050501580156136d7573d6000803e3d6000fd5b505b60048601541561372b57600486015460405173ffffffffffffffffffffffffffffffffffffffff86169180156108fc02916000818181858888f19350505050158015613729573d6000803e3d6000fd5b505b60058601541561377d57600586015460405173ffffffffffffffffffffffffffffffffffffffff85169180156108fc02916000818181858888f1935050505015801561377b573d6000803e3d6000fd5b505b6003860154156137cf57600386015460405173ffffffffffffffffffffffffffffffffffffffff84169180156108fc02916000818181858888f193505050501580156137cd573d6000803e3d6000fd5b505b613878565b600386015460058701546004880154600289015460009392916137f691614da4565b6138009190614da4565b61380a9190614da4565b905080341015613876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6d73672e76616c756520746f6f206c6f770000000000000000000000000000006044820152606401610173565b505b60005b600a870154811015613a0e57600087600a01828154811061389e5761389e614a97565b6000918252602082200154600b8a01805473ffffffffffffffffffffffffffffffffffffffff909216935090849081106138da576138da614a97565b9060005260206000200154905060008960090184815481106138fe576138fe614a97565b60009182526020808320908204015460ff601f9092166101000a90041691508a8183600281111561393157613931614e88565b600281111561394257613942614e88565b81526020808201929092526040908101600090812073ffffffffffffffffffffffffffffffffffffffff8816825283528181208682529092528120915082600281111561399157613991614e88565b036139aa576139a584828c8c8c8c8c613a39565b6139f7565b60028260028111156139be576139be614e88565b036139ce576139a584828c613bb1565b60018260028111156139e2576139e2614e88565b036139f7576139f78484838d8d8d8d8d613d7c565b505050508080613a0690614bf4565b91505061387b565b50505050505050565b6000610c8c8373ffffffffffffffffffffffffffffffffffffffff8416614163565b613a4c878683896002016001015461425d565b613a5f878684896004016001015461425d565b613a72878686896006016001015461425d565b613a85878685896008016001015461425d565b600186015487908015801590613ab1575073ffffffffffffffffffffffffffffffffffffffff87163014155b1561339b576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528291908416906370a0823190602401602060405180830381865afa158015613b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b49919061517f565b101561339b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420656e6f75676820657263323020746f6b656e730000000000000000006044820152606401610173565b60038201548390158015613bc757506005830154155b8015613bd557506007830154155b8015613be357506009830154155b613c49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f455243373231207472616e7366657273206e6f7420737570706f7274656400006044820152606401610173565b600183015415801590613c72575073ffffffffffffffffffffffffffffffffffffffff82163014155b15612281576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600091908316906370a0823190602401602060405180830381865afa158015613ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0b919061517f565b600185015490915081101561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f7420656e6f756768204552433732312062616c616e6365000000000000006044820152606401610173565b600186015488908015613e90576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018b90526000919084169062fdd58e90604401602060405180830381865afa158015613dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e22919061517f565b905081811015613e8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f455243313135352062616c616e6365206973206e6f742076616c6964000000006044820152606401610173565b505b5060078701548015613f16578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88888c858d6006016000016040518663ffffffff1660e01b8152600401613ee395949392919061530a565b600060405180830381600087803b158015613efd57600080fd5b505af1158015613f11573d6000803e3d6000fd5b505050505b5060098701548015613f9c578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88878c858d6008016000016040518663ffffffff1660e01b8152600401613f6995949392919061530a565b600060405180830381600087803b158015613f8357600080fd5b505af1158015613f97573d6000803e3d6000fd5b505050505b50600587015480156140d15773ffffffffffffffffffffffffffffffffffffffff8416614057576040517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018b90526044820183905283169063f5298aca90606401600060405180830381600087803b15801561403a57600080fd5b505af115801561404e573d6000803e3d6000fd5b505050506140d1565b8173ffffffffffffffffffffffffffffffffffffffff1663f242432a88868c858d6004016000016040518663ffffffff1660e01b815260040161409e95949392919061530a565b600060405180830381600087803b1580156140b857600080fd5b505af11580156140cc573d6000803e3d6000fd5b505050505b5060038701548015614157578173ffffffffffffffffffffffffffffffffffffffff1663f242432a88858c858d6002016000016040518663ffffffff1660e01b815260040161412495949392919061530a565b600060405180830381600087803b15801561413e57600080fd5b505af1158015614152573d6000803e3d6000fd5b505050505b50505050505050505050565b6000818152600183016020526040812054801561424c576000614187600183615198565b855490915060009061419b90600190615198565b90508181146142005760008660000182815481106141bb576141bb614a97565b90600052602060002001549050808760000184815481106141de576141de614a97565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614211576142116153eb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b6d565b6000915050610b6d565b5092915050565b83811561150f573073ffffffffffffffffffffffffffffffffffffffff8516036143c25773ffffffffffffffffffffffffffffffffffffffff83161561433d576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282169063a9059cbb906044015b6020604051808303816000875af1158015614313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614337919061515d565b5061150f565b6040517f42966c680000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216906342966c6890602401600060405180830381600087803b1580156143a557600080fd5b505af11580156143b9573d6000803e3d6000fd5b5050505061150f565b73ffffffffffffffffffffffffffffffffffffffff831615614441576040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490528216906323b872dd906064016142f4565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152604482018490528216906323b872dd906064016020604051808303816000875af11580156144bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144e0919061515d565b506040517f42966c680000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216906342966c689060240161336d565b8280548282559060005260206000209081019282156145ae579160200282015b828111156145ae57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614554565b506126d59291505b808211156126d557600081556001016145b6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614640576146406145ca565b604052919050565b600067ffffffffffffffff821115614662576146626145ca565b5060051b60200190565b600082601f83011261467d57600080fd5b8135602061469261468d83614648565b6145f9565b82815260059290921b840181019181810190868411156146b157600080fd5b8286015b848110156146cc57803583529183019183016146b5565b509695505050505050565b600082601f8301126146e857600080fd5b813567ffffffffffffffff811115614702576147026145ca565b61473360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016145f9565b81815284602083860101111561474857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261477657600080fd5b8135602061478661468d83614648565b82815260059290921b840181019181810190868411156147a557600080fd5b8286015b848110156146cc57803567ffffffffffffffff8111156147c95760008081fd5b6147d78986838b01016146d7565b8452509183019183016147a9565b600080600080608085870312156147fb57600080fd5b8435935060208086013567ffffffffffffffff8082111561481b57600080fd5b818801915088601f83011261482f57600080fd5b813561483d61468d82614648565b81815260059190911b8301840190848101908b83111561485c57600080fd5b8585015b83811015614894578035858111156148785760008081fd5b6148868e89838a010161466c565b845250918601918601614860565b509750505060408801359250808311156148ad57600080fd5b6148b989848a01614765565b945060608801359250808311156148cf57600080fd5b50506148dd8782880161466c565b91505092959194509250565b803573ffffffffffffffffffffffffffffffffffffffff8116811461490d57600080fd5b919050565b60006020828403121561492457600080fd5b813567ffffffffffffffff8082111561493c57600080fd5b908301906080828603121561495057600080fd5b60405160808101818110838211171561496b5761496b6145ca565b6040528235815260208301358281111561498457600080fd5b614990878286016146d7565b602083015250604083013560408201526149ac606084016148e9565b606082015295945050505050565b6000806000606084860312156149cf57600080fd5b83359250602084013567ffffffffffffffff8111156149ed57600080fd5b6149f9868287016146d7565b925050614a08604085016148e9565b90509250925092565b60008060408385031215614a2457600080fd5b614a2d836148e9565b946020939093013593505050565b600080600060608486031215614a5057600080fd5b833567ffffffffffffffff80821115614a6857600080fd5b614a74878388016146d7565b94506020860135915080821115614a8a57600080fd5b506149f9868287016146d7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680614ada57607f821691505b602082108103614b13577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60005b83811015614b34578181015183820152602001614b1c565b50506000910152565b60008251614b4f818460208701614b19565b9190910192915050565b60008151808452614b71816020860160208601614b19565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000614bb66040830185614b59565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2557614c25614bc5565b5060010190565b600081518084526020808501945080840160005b83811015614c5c57815187529582019590820190600101614c40565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614caf578284038952614c9d848351614b59565b98850198935090840190600101614c85565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614caf578284038952614cf2848351614c2c565b98850198935090840190600101614cda565b60a0808252865190820181905260009060209060c0840190828a01845b82811015614d5357815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614d21565b50505083810382850152614d678189614c2c565b9150508281036040840152614d7c8187614c67565b90508281036060840152614d908186614c2c565b9050828103608084015261169f8185614cbc565b80820180821115610b6d57610b6d614bc5565b82815260406020820152600061294e6040830184614b59565b602081526000610c8c6020830184614b59565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b815160009082906020808601845b83811015614e3c57815185529382019390820190600101614e20565b50929695505050505050565b815160009082906020808601845b83811015614e3c57815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101614e56565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181815b80851115614f1057817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614ef657614ef6614bc5565b80851615614f0357918102915b93841c9390800290614ebc565b509250929050565b600082614f2757506001610b6d565b81614f3457506000610b6d565b8160018114614f4a5760028114614f5457614f70565b6001915050610b6d565b60ff841115614f6557614f65614bc5565b50506001821b610b6d565b5060208310610133831016604e8410600b8410161715614f93575081810a610b6d565b614f9d8383614eb7565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614fcf57614fcf614bc5565b029392505050565b6000610c8c60ff841683614f18565b601f82111561177a57600081815260208120601f850160051c8101602086101561500d5750805b601f850160051c820191505b8181101561302f57828155600101615019565b815167ffffffffffffffff811115615046576150466145ca565b61505a816150548454614ac6565b84614fe6565b602080601f8311600181146150ad57600084156150775750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561302f565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156150fa578886015182559484019460019091019084016150db565b508582101561513657878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610b6d57610b6d614bc5565b60006020828403121561516f57600080fd5b81518015158114610c8c57600080fd5b60006020828403121561519157600080fd5b5051919050565b81810381811115610b6d57610b6d614bc5565b818103600083128015838313168383128216171561425657614256614bc5565b600082615201577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561525557615255614bc5565b500590565b808201828112600083128015821682158216171561527a5761527a614bc5565b505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c2557614c25614bc5565b60007f800000000000000000000000000000000000000000000000000000000000000082036152e4576152e4614bc5565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600073ffffffffffffffffffffffffffffffffffffffff808816835260208188168185015286604085015285606085015260a0608085015260009150845461535181614ac6565b8060a087015260c060018084166000811461537357600181146153ab576153d9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a010196506153d9565b896000528560002060005b858110156153d15781548b82018601529083019087016153b6565b8a0184019750505b50949c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220a390fcac072076adaa40df2fa22639edd8936c95fa97bf222f09bc27ebf7b5f064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}